#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

var DevTree 0
public DevTree

var DevCurrent 0
public DevCurrent

extern DevRootBuild { -- }

var DevStack 0 (* we can go 64 layers deep *)
public DevStack

var DevStackPtr 0
public DevStackPtr

fn private DevStackPUSH { v -- }
	v@ DevStack@ DevStackPtr@ + !

	DevStackPtr@ 4 + DevStackPtr!
end

fn private DevStackPOP { -- v }
	DevStackPtr@ 4 - dup DevStackPtr!
	DevStack@ + @ v!
end

fn private DevTreeCheck { opname -- }
	if (DevCurrent@ 0 == DevCurrent@ -1 == ||)
		opname@ "no valid device tree node selected for operation %s\n" Problem
	end
end

fn DevTreeWalk { path -- cnode }
	DevTree@ TreeRoot cnode!

	auto pcomp
	256 alloc pcomp!

	while (path@ 0 ~=)
		path@ pcomp@ '/' 255 strntok path!

		if (pcomp@ strlen 0 ==)
			return
		end

		auto tnc
		cnode@ TreeNodeChildren tnc!

		auto n
		tnc@ ListHead n!

		auto nnode
		0 nnode!

		while (n@ 0 ~=)
			auto pnode
			n@ ListNodeValue pnode!

			if (pnode@ TreeNodeValue DeviceNode_Name + @ pcomp@ strcmp)
				pnode@ nnode! break
			end

			n@ ListNodeNext n!
		end

		if (nnode@ 0 ==)
			0 cnode!

			return
		end

		nnode@ cnode!
	end
end

fn DeviceParent { -- }
	"DeviceParent" DevTreeCheck

	DevCurrent@ DevStackPUSH
	DevCurrent@ TreeNodeParent DevCurrent!
end

fn DeviceSelectNode { node -- }
	if (node@ 0 == node@ -1 == ||)
		node@ "tried to DeviceSelectNode null or invalid node %x\n" Problem
	end

	DevCurrent@ DevStackPUSH
	node@ DevCurrent!
end

fn DeviceSelect { path -- }
	DevCurrent@ DevStackPUSH

	auto node
	path@ DevTreeWalk node!

	if (node@ 0 ~=)
		node@ DevCurrent!
	end else
		path@ "couldn't DeviceSelect '%s'\n" Problem
	end
end

fn private DeviceNNew { -- node }
	DeviceNode_SIZEOF Calloc node!

	ListCreate node@ DeviceNode_Methods + !
	ListCreate node@ DeviceNode_Properties + !
end

fn private DeviceNNewOMP { alias ml pl -- dnode }
	DeviceNode_SIZEOF Calloc
	dnode!

	ml@ dnode@ DeviceNode_Methods + !
	pl@ dnode@ DeviceNode_Properties + !
	alias@ dnode@ DeviceNode_Alias + !
end

(* creates a new unnamed device node, adds it to the
device tree as a child of the current device, sets
itself as the new current device *)
fn DeviceNew { -- }
	"DeviceNew" DevTreeCheck

	DevCurrent@ DevStackPUSH

	DeviceNNew DevCurrent@ DevTree@ TreeInsertChild DevCurrent!
end



fn DeviceClone { node -- }
	DevCurrent@ DevStackPUSH

	auto ml
	node@ TreeNodeValue DeviceNode_Methods + @ ml!

	auto pl
	node@ TreeNodeValue DeviceNode_Properties + @ pl!

	auto tnode

	node@ ml@ pl@ DeviceNNewOMP DevCurrent@ DevTree@ TreeInsertChild tnode!

	tnode@ TreeNodeChildren Free
	node@ TreeNodeChildren tnode@ TreeNode_Children + !

	tnode@ DevCurrent!
end

fn DeviceCloneWalk { path -- }
	auto dn
	path@ DevTreeWalk dn!

	if (dn@ 0 ~=)
		dn@ DeviceClone
	end
end

fn DSetPath { -- }
	"DSetPath" DevTreeCheck

	auto path
	"path" DGetProperty path!

	if (path@)
		return
	end

	auto ppath

	DeviceParent
		"path" DGetProperty ppath!
	DeviceExit

	if (ppath@ 0 ==)
		"parent has no path\n" Problem
	end

	auto ppl
	ppath@ strlen ppl!

	auto mpl
	DGetName strlen mpl!

	ppl@ mpl@ + 2 + Calloc path!

	path@ ppath@ strcpy
	'/' path@ ppl@ + sb
	path@ ppl@ + 1 + DGetName strcpy

	path@ "path" DAddProperty
end

fn DSetName { name -- }
	"DSetName" DevTreeCheck

	name@ DevCurrent@ TreeNodeValue DeviceNode_Name + !

	DSetPath
end

fn DAddMethodFull { board method auc name -- }
	"DAddMethodFull" DevTreeCheck

	auto mnode
	DeviceMethod_SIZEOF Calloc mnode!

	name@ mnode@ DeviceMethod_Name + !
	method@ mnode@ DeviceMethod_Func + !
	auc@ mnode@ DeviceMethod_AUC + !
	board@ mnode@ DeviceMethod_Board + !

	mnode@ DGetMethods ListInsert
end

fn DAddMethod { method name -- }
	"DAddMethod" DevTreeCheck

	0 method@ 0 name@ DAddMethodFull
end

fn DSetProperty { value name -- }
	"DSetProperty" DevTreeCheck

	auto plist
	DGetProperties plist!

	auto n
	plist@ ListHead n!

	auto prop
	-1 prop!

	while (n@ 0 ~=)
		auto pnode
		n@ ListNodeValue
		pnode!

		if (pnode@ DeviceProperty_Name + @ name@ strcmp)
			pnode@ prop!
			break
		end

		n@ ListNodeNext n!
	end

	if (prop@ -1 ==)
		auto mnode
		DeviceProperty_SIZEOF Calloc mnode!

		name@ mnode@ DeviceProperty_Name + !
		value@ mnode@ DeviceProperty_Value + !

		mnode@ DGetProperties ListInsert
	end else
		value@ prop@ DeviceProperty_Value + !
	end
end

fn DAddProperty { value name -- }
	"DAddProperty" DevTreeCheck

	value@ name@ DSetProperty
end

fn DGetProperty { name -- string }
	"DGetProperty" DevTreeCheck

	auto plist
	DGetProperties plist!

	auto n
	plist@ ListHead n!

	while (n@ 0 ~=)
		auto pnode
		n@ ListNodeValue
		pnode!

		if (pnode@ DeviceProperty_Name + @ name@ strcmp)
			pnode@ DeviceProperty_Value + @ string!
			return
		end

		n@ ListNodeNext n!
	end

	0 string!
end

fn DGetMethod { name -- ptr }
	"DGetMethod" DevTreeCheck

	auto plist
	DGetMethods plist!

	auto n
	plist@ List_Head + @ n!

	while (n@ 0 ~=)
		auto pnode
		n@ ListNodeValue
		pnode!

		if (pnode@ DeviceMethod_Name + @ name@ strcmp)
			pnode@ ptr!
			return
		end

		n@ ListNodeNext n!
	end

	0 ptr!
end

fnptr DevMethod { argvt argcn -- out1 out2 out3 }

fn DCallMethodPtr { ... ptr -- out1 out2 out3 }
	"DCallMethodPtr" DevTreeCheck

	argv argc@ ptr@ DeviceMethod_Func + @ DevMethod out3! out2! out1!
end

fn DCallMethod { ... name -- out1 out2 out3 ok }
	"DCallMethod" DevTreeCheck

	auto plist
	DGetMethods plist!

	auto n
	plist@ List_Head + @ n!

	while (n@ 0 ~=)
		auto pnode
		n@ ListNodeValue
		pnode!

		if (pnode@ DeviceMethod_Name + @ name@ strcmp)
			argv argc@ pnode@ DeviceMethod_Func + @ DevMethod out3! out2! out1!

			1 ok! return
		end

		n@ ListNodeNext n!
	end

	0 ok!
end

fn DevIteratorInit { -- iter }
	"DevIteratorInit" DevTreeCheck

	DevCurrent@ TreeNodeChildren ListHead iter!
end

fn DevIterate { iterin -- iterout }
	iterin@ ListNodeValue DeviceSelectNode

	iterin@ ListNodeNext iterout!
end

fn DeviceExit { -- }
	DevStackPOP DevCurrent!
end

fn DGetName { -- name }
	"DGetName" DevTreeCheck

	DevCurrent@ TreeNodeValue DeviceNode_Name + @ name!
end

fn DGetMethods { -- methods }
	"DGetMethods" DevTreeCheck

	DevCurrent@ TreeNodeValue DeviceNode_Methods + @ methods!
end

fn DGetProperties { -- properties }
	"DGetProperties" DevTreeCheck

	DevCurrent@ TreeNodeValue DeviceNode_Properties + @ properties!
end

fn DGetCurrent { -- current }
	DevCurrent@ current!
end

fn private BuildDeviceTree { -- }
	TreeCreate DevTree!

	DeviceNNew DevTree@ TreeSetRoot DevCurrent!

	"" "path" DAddProperty

	DevRootBuild
end

fn DeviceInit { -- }
	256 Calloc DevStack!

	BuildDeviceTree
end