#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

var DevTree 0
public DevTree

var DevCurrent 0
public DevCurrent

extern DevRootBuild

var DevStack 0 (* we can go 64 layers deep *)
var DevStackPtr 0

procedure private DevStackPUSH (* v -- *)
	DevStack@ DevStackPtr@ + !
	DevStackPtr@ 4 + DevStackPtr!
end

procedure private DevStackPOP (* -- v *)
	DevStackPtr@ 4 - dup DevStackPtr!
	DevStack@ + @
end

procedure private DevTreeCheck { opname -- }
	if (DevCurrent@ 0 == DevCurrent@ -1 == ||)
		opname@ "no valid device tree node selected for operation %s\n" Problem
	end
end

procedure DevTreeWalk { path -- cnode }
	DevTree@ TreeRoot cnode!

	auto pcomp
	256 Calloc pcomp!

	while (path@ 0 ~=)
		path@ pcomp@ '/' 255 strntok path!

		if (pcomp@ strlen 0 ==)
			pcomp@ Free

			return
		end

		auto tnc
		cnode@ TreeNodeChildren tnc!

		auto n
		tnc@ ListHead n!

		auto nnode
		0 nnode!

		while (n@ 0 ~=)
			auto pnode
			n@ ListNodeValue pnode!

			if (pnode@ TreeNodeValue DeviceNode_Name + @ pcomp@ strcmp)
				pnode@ nnode! break
			end

			n@ ListNodeNext n!
		end

		if (nnode@ 0 ==)
			pcomp@ Free
			0 cnode!

			return
		end

		nnode@ cnode!
	end

	pcomp@ Free
end

procedure DeviceParent (* -- *)
	"DeviceParent" DevTreeCheck

	DevCurrent@ DevStackPUSH
	DevCurrent@ TreeNodeParent DevCurrent!
end

procedure DeviceSelectNode { node -- }
	if (node@ 0 == node@ -1 == ||)
		node@ "tried to DeviceSelectNode null or invalid node\n" Problem
	end

	DevCurrent@ DevStackPUSH
	node@ DevCurrent!
end

procedure DeviceSelect { path -- }
	DevCurrent@ DevStackPUSH

	auto node
	path@ DevTreeWalk node!

	if (node@ 0 ~=)
		node@ DevCurrent!
	end else
		path@ "couldn't DeviceSelect '%s'\n" Problem
	end
end

procedure private DeviceNNew { -- dnode }
	DeviceNode_SIZEOF Calloc dnode!

	ListCreate dnode@ DeviceNode_Methods + !
	ListCreate dnode@ DeviceNode_Properties + !
end

procedure private DeviceNNewOMP { ml pl -- dnode }
	DeviceNode_SIZEOF Calloc
	dnode!

	ml@ dnode@ DeviceNode_Methods + !
	pl@ dnode@ DeviceNode_Properties + !
end

(* creates a new unnamed device node, adds it to the
device tree as a child of the current device, sets
itself as the new current device *)
procedure DeviceNew (* -- *)
	"DeviceNew" DevTreeCheck

	DevCurrent@ DevStackPUSH

	DeviceNNew DevCurrent@ DevTree@ TreeInsertChild DevCurrent!
end

procedure DeviceClone { node -- }
	DevCurrent@ DevStackPUSH

	auto ml
	node@ TreeNodeValue DeviceNode_Methods + @ ml!

	auto pl
	node@ TreeNodeValue DeviceNode_Properties + @ pl!

	auto tnode

	ml@ pl@ DeviceNNewOMP DevCurrent@ DevTree@ TreeInsertChild tnode!

	tnode@ TreeNodeChildren Free
	node@ TreeNodeChildren tnode@ TreeNode_Children + !

	tnode@ DevCurrent!
end

procedure DeviceCloneWalk (* path -- *)
	auto dn
	DevTreeWalk dn!

	if (dn@ 0 ~=)
		dn@ DeviceClone
	end
end

procedure DSetName (* name -- *)
	"DSetName" DevTreeCheck

	DevCurrent@ TreeNodeValue DeviceNode_Name + !
end

procedure DAddMethodFull { board method pec name -- }
	"DAddMethodFull" DevTreeCheck

	auto mnode
	DeviceMethod_SIZEOF Calloc mnode!

	name@ mnode@ DeviceMethod_Name + !
	method@ mnode@ DeviceMethod_Func + !
	pec@ mnode@ DeviceMethod_PEC + !
	board@ mnode@ DeviceMethod_Board + !

	mnode@ DGetMethods ListInsert
end

procedure DAddMethod { method name -- }
	"DAddMethod" DevTreeCheck

	0 method@ 0 name@ DAddMethodFull
end

procedure DSetProperty { value name -- }
	"DSetProperty" DevTreeCheck

	auto plist
	DGetProperties plist!

	auto n
	plist@ ListHead n!

	auto prop
	-1 prop!

	while (n@ 0 ~=)
		auto pnode
		n@ ListNodeValue
		pnode!

		if (pnode@ DeviceProperty_Name + @ name@ strcmp)
			pnode@ prop!
			break
		end

		n@ ListNodeNext n!
	end

	if (prop@ -1 ==)
		auto mnode
		DeviceProperty_SIZEOF Calloc mnode!

		name@ mnode@ DeviceProperty_Name + !
		value@ mnode@ DeviceProperty_Value + !

		mnode@ DGetProperties ListInsert
	end else
		value@ prop@ DeviceProperty_Value + !
	end
end

procedure DAddProperty (* prop name -- *)
	"DAddProperty" DevTreeCheck

	DSetProperty
end

procedure DGetProperty { name -- string }
	"DGetProperty" DevTreeCheck

	auto plist
	DGetProperties plist!

	auto n
	plist@ ListHead n!

	while (n@ 0 ~=)
		auto pnode
		n@ ListNodeValue
		pnode!

		if (pnode@ DeviceProperty_Name + @ name@ strcmp)
			pnode@ DeviceProperty_Value + @ string!
			return
		end

		n@ ListNodeNext n!
	end

	0 string!
end

procedure DGetMethod { name -- ptr }
	"DGetMethod" DevTreeCheck

	auto plist
	DGetMethods plist!

	auto n
	plist@ List_Head + @ n!

	while (n@ 0 ~=)
		auto pnode
		n@ ListNodeValue
		pnode!

		if (pnode@ DeviceMethod_Name + @ name@ strcmp)
			pnode@ ptr!
			return
		end

		n@ ListNodeNext n!
	end

	0 ptr!
end

procedure DCallMethodCommon (* ... ptr -- ... ok? *)
	auto pnode
	pnode!

	if (pnode@ DeviceMethod_PEC + @ 0 ==)
		pnode@ DeviceMethod_Func + @ Call 1 return
	end else
		auto ok
		pnode@ DeviceMethod_Board + @
		pnode@ DeviceMethod_Func + @
		pnode@ DeviceMethod_PEC + @
		PECEvaluateFunc ok!
		if (ok@ 1 ~=)
			[ok@]PECErrors@ "couldn't execute PEC method '%s': %s\n" Problem
			0 return
		end

		1 return
	end
end

procedure DCallMethodPtr (* ... ptr -- ... *)
	"DCallMethodPtr" DevTreeCheck

	DCallMethodCommon drop
end

procedure DCallMethod (* ... name -- ... ok? *)
	"DCallMethod" DevTreeCheck

	auto name
	name!

	auto plist
	DGetMethods plist!

	auto n
	plist@ List_Head + @ n!

	while (n@ 0 ~=)
		auto pnode
		n@ ListNodeValue
		pnode!

		if (pnode@ DeviceMethod_Name + @ name@ strcmp)
			pnode@ DCallMethodCommon return
		end

		n@ ListNodeNext n!
	end

	0
end

procedure DevIteratorInit { -- iter }
	"DevIteratorInit" DevTreeCheck

	DevCurrent@ TreeNodeChildren ListHead iter!
end

procedure DevIterate { iterin -- iterout }
	iterin@ ListNodeValue DeviceSelectNode

	iterin@ ListNodeNext iterout!
end

procedure DeviceExit (* -- *)
	DevStackPOP DevCurrent!
end

procedure DGetName (* -- name *)
	"DGetName" DevTreeCheck

	DevCurrent@ TreeNodeValue DeviceNode_Name + @
end

procedure DGetMethods (* -- methods *)
	"DGetMethods" DevTreeCheck

	DevCurrent@ TreeNodeValue DeviceNode_Methods + @
end

procedure DGetProperties (* -- properties *)
	"DGetProperties" DevTreeCheck

	DevCurrent@ TreeNodeValue DeviceNode_Properties + @
end

procedure private BuildDeviceTree (* -- *)
	TreeCreate DevTree!

	DeviceNNew DevTree@ TreeSetRoot DevCurrent!

	DevRootBuild
end

procedure DeviceInit (* -- *)
	256 Calloc DevStack!

	BuildDeviceTree
end