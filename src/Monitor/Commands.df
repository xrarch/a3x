#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

#include "monitor.h"

extern _DumpStack
extern HeapDump

extern MonitorCommandDumpstate
extern MonitorCommandPrintreg
extern MonitorCommandSavereg

procedure MonitorCommandsInit (* -- *)
	ListCreate MonitorCommandList!

	"Boot with default parameters."
	pointerof MonitorCommandAutoboot
	"autoboot"
	MonitorAddCommand

	"[dev] Display information about a disk."
	pointerof MonitorCommandDisklabel
	"disklabel"
	MonitorAddCommand

	"Dump firmware heap."
	pointerof MonitorCommandDumpHeap
	"dumpheap"
	MonitorAddCommand

	"[name] Print environment variable."
	pointerof MonitorCommandPrintenv
	"printenv"
	MonitorAddCommand

	"Display help."
	pointerof MonitorCommandHelp
	"help"
	MonitorAddCommand

	"Clear console."
	pointerof MonitorCommandClear
	"clear"
	MonitorAddCommand

	"Print banner."
	pointerof MonitorCommandBanner
	"banner"
	MonitorAddCommand

	"[dev] List children of device."
	pointerof MonitorCommandLs
	"ls"
	MonitorAddCommand

	"[dev] List properties of device."
	pointerof MonitorCommandDinfo
	"dinfo"
	MonitorAddCommand

	"[name] [new] Set environment variable."
	pointerof MonitorCommandSetenv
	"setenv"
	MonitorAddCommand

	"[name] Delete environment variable."
	pointerof MonitorCommandDelenv
	"delenv"
	MonitorAddCommand

	"List environment variables."
	pointerof MonitorCommandListenv
	"listenv"
	MonitorAddCommand

	"Reset system."
	pointerof LateReset
	"reset"
	MonitorAddCommand

	0
	pointerof _DumpStack
	"_ds"
	MonitorAddCommand

	"[ptr] Print string."
	pointerof MonitorCommandPuts
	"puts"
	MonitorAddCommand

	"[string] Echo string."
	pointerof MonitorCommandEcho
	"echo"
	MonitorAddCommand

	"Exit monitor."
	pointerof MonitorCommandExit
	"exit"
	MonitorAddCommand

	"[dev] [args ...] Boot from device."
	pointerof MonitorCommandBoot
	"boot"
	MonitorAddCommand

	"Reset nvram."
	pointerof MonitorCommandNVReset
	"nvreset"
	MonitorAddCommand

	"Uptime in milliseconds."
	pointerof MonitorCommandUptime
	"uptime"
	MonitorAddCommand

	"[time in ms] Wait."
	pointerof MonitorCommandWait
	"wait"
	MonitorAddCommand

	"Dump stored state."
	pointerof MonitorCommandDumpstate
	"dumpstate"
	MonitorAddCommand

	"[register] Print saved value of a register."
	pointerof MonitorCommandPrintreg
	"printreg"
	MonitorAddCommand

	"[register] [value] Set saved value of a register."
	pointerof MonitorCommandSavereg
	"savereg"
	MonitorAddCommand

	"[addr] [value] Set addr to value."
	pointerof MonitorCommandPoke
	"poke"
	MonitorAddCommand

	"[addr] Get value of addr."
	pointerof MonitorCommandPeek
	"peek"
	MonitorAddCommand

	0
	pointerof AAA
	"aaa"
	MonitorAddCommand
end

const ConsoleAssumedHeight 22

var UsedLines 0
var AllLines 0

procedure ResetLines (* -- *)
	0 UsedLines!
	0 AllLines!
end

procedure WaitNext { -- result }
	1 result!

	if (AllLines@)
		return
	end

	if (UsedLines@ ConsoleAssumedHeight >)
		"\[[7m(any) for more, (a) for all, (p) for a page, (q) to quit\[[0m" Printf
		auto c
		-1 c!

		while (c@ -1 ==)
			Getc c!
		end

		if (c@ 'q' ==)
			0 result!
		end elseif (c@ 'p' ==)
			0 UsedLines!
		end elseif (c@ 'a' ==)
			1 AllLines!
		end

		"\[[2K\r" Puts
	end

	1 UsedLines +=
end

procedure AAA (* -- *)
	ResetLines
	
	auto count
	1 count!
	while (1)
		if (WaitNext ~~)
			return
		end

	    auto i
	    0 i!
	    while (i@ count@ <)
	        'A' Putc
	        1 i +=
	    end
	    '\n' Putc
	    1 count +=
	end
end

procedure MonitorCommandPoke (* -- *)
	auto addr
	MonitorParseWord addr!

	auto val
	MonitorParseWord val!

	val@ atoi addr@ atoi !

	val@ atoi addr@ atoi "%x = %x\n" Printf

	val@ Free
	addr@ Free
end

procedure MonitorCommandPeek (* -- *)
	auto addr
	MonitorParseWord addr!

	addr@ atoi @ addr@ atoi "%x = %x\n" Printf

	addr@ Free
end

procedure MonitorCommandWait (* -- *)
	auto clock
	"/clock" DevTreeWalk clock!

	if (clock@ 0 ==)
		"no clock!\n" Printf
		return
	end

	clock@ DeviceSelectNode
		auto ms
		MonitorParseWord ms!

		ms@ atoi "wait" DCallMethod drop

		ms@ Free
	DeviceExit
end

procedure MonitorCommandUptime (* -- *)
	auto clock
	"/clock" DevTreeWalk clock!

	if (clock@ 0 ==)
		"no clock!\n" Printf
		return
	end

	clock@ DeviceSelectNode
		"uptime" DCallMethod drop "uptime (ms): %d\n" Printf
	DeviceExit
end

procedure MonitorCommandHinv (* -- *)

end

procedure MonitorCommandNVReset (* -- *)
	NVRAMFormat
end

procedure MonitorCommandClear (* -- *)
	"\[c" Printf
end

procedure MonitorCommandAutoboot (* -- *)
	[AutoBoot]BootErrors@ "boot: %s\n" Printf
end

procedure MonitorCommandBoot (* -- *)
	auto dev
	MonitorParseDevPath dev!
	if (dev@ 0 ==) return end

	auto arg
	0 arg!
	if (MonitorLinePoint@ 0 ~=)
		MonitorLinePoint@ 1 + arg!
	end

	[dev@ arg@ BootNode]BootErrors@ "boot: %s\n" Printf
end

procedure MonitorCommandExit (* -- *)
	0 MonitorRunning!
end

procedure MonitorCommandEcho (* -- *)
	MonitorLinePoint@ 1 + "%s\n" Printf
end

procedure MonitorCommandPuts (* -- *)
	auto ptr
	MonitorParseWord ptr!

	ptr@ atoi "%s\n" Printf

	ptr@ Free
end

procedure MonitorCommandDinfo (* -- *)
	auto dev
	MonitorParseDevPath dev!
	if (dev@ 0 ==) return end

	ResetLines

	dev@ DeviceSelectNode
		'\n' Putc

		"\[[33m[properties]\[[0m\n" Printf

		auto plist
		DGetProperties plist!

		auto n
		plist@ ListHead n!

		while (n@ 0 ~=)
			if (WaitNext ~~)
				return
			end

			auto pnode
			n@ ListNodeValue pnode!

			pnode@ DeviceProperty_Value + @ pnode@ DeviceProperty_Name + @ " \[[94m%s\[[0m\t\t0x%x\n" Printf

			n@ ListNode_Next + @ n!
		end

		'\n' Putc

		"\[[33m[methods]\[[0m\n" Printf

		auto mlist
		DGetMethods mlist!

		mlist@ ListHead n!

		while (n@ 0 ~=)
			if (WaitNext ~~)
				return
			end

			n@ ListNodeValue pnode!

			pnode@ DeviceMethod_Func + @ pnode@ DeviceProperty_Name + @ " \[[94m%s\[[0m\t\t%x\n" Printf

			n@ ListNode_Next + @ n!
		end

		'\n' Putc
	DeviceExit
end

procedure MonitorCommandListenv (* -- *)
	auto i
	0 i!

	ResetLines

	auto sp
	NVRAMHeader_SIZEOF sp!
	while (i@ NVRAMVarCount <)
		if (sp@ NVRAMOffset gb 0 ~=)
			if (WaitNext ~~)
				return
			end

			sp@ NVRAMVariable_Contents + NVRAMOffset sp@ NVRAMOffset " \[[33m%s\[[0m\t\t\[[94m%s\[[0m\n" Printf
		end

		NVRAMVariable_SIZEOF sp +=
		1 i +=
	end
end

procedure MonitorCommandDelenv (* -- *)
	auto name
	MonitorParseWord name!

	name@ NVRAMDeleteVar

	name@ Free
end

procedure MonitorCommandSetenv (* -- *)
	auto name
	MonitorParseWord name!

	auto new
	MonitorLinePoint@ 1 + new!

	new@ name@ NVRAMSetVar

	new@ name@ "set %s = \"%s\"\n" Printf

	name@ Free
end

procedure MonitorCommandPrintenv (* -- *)
	auto word
	MonitorParseWord word!

	word@ NVRAMGetVar dup if (0 ~=)
		word@ "%s = \"%s\"\n" Printf
	end else
		drop word@ "%s is not a variable.\n" Printf
	end

	word@ Free
end

procedure MonitorLsH { tabs dev } (* -- continue *)
	auto tnc
	dev@ TreeNodeChildren tnc!

	auto n
	tnc@ ListHead n!

	while (n@ 0 ~=)
		if (WaitNext ~~)
			0 return
		end

		auto pnode
		n@ ListNodeValue pnode!

		pnode@ " \[[33m%x\[[0m" Printf 

		auto i
		0 i!
		while (i@ tabs@ <)
			"  " Puts
			1 i +=
		end

		pnode@ TreeNodeValue DeviceNode_Name + @ "\[[94m/%s\[[0m" Printf

		auto alias
		pnode@ TreeNodeValue DeviceNode_Alias + @ alias!

		if (alias@ 0 ~=)
			alias@ "\t-> %x\n" Printf
		end else
			'\n' Putc

			if (tabs@ 1 + pnode@ MonitorLsH ~~)
				0 return
			end
		end

		n@ ListNode_Next + @ n!
	end

	1
end

procedure MonitorCommandLs (* -- *)
	auto dev
	MonitorParseDevPath dev!
	if (dev@ 0 ==) return end

	ResetLines

	dev@ DeviceSelectNode
		DGetName "\[[33m[%s]:\[[0m\n" Printf
	DeviceExit

	1 dev@ MonitorLsH drop
end

table DiskTypes
	0
	"FLAT DISK"
	"PARTITION"
endtable

procedure MonitorCommandDisklabel (* -- *)
	auto dev
	MonitorParseDevPath dev!
	if (dev@ 0 ==) return end

	dev@ DeviceSelectNode
		auto disk
		0 disk!

		auto dtype
		"deviceType" DGetProperty dtype!

		if (dtype@ 0 ==) "not a device.\n" Printf DeviceExit return end

		if (dtype@ "disk" strcmp)
			1 disk!
		end elseif (dtype@ "disk-logical" strcmp)
			2 disk!
		end

		if (disk@ 0 ==)
			"not a raw disk or logical volume.\n" Printf
			DeviceExit
			return
		end

		[disk@]DiskTypes@ "\[[33mnode type:\[[0m\t\[[94m%s\[[0m\n" Printf

		auto dlabel
		"diskLabel" DGetProperty dlabel!

		if (dlabel@ 0 ==)
			"none or not applicable." dlabel!
		end

		dlabel@ "\[[33mdisk label:\[[0m\t\[[94m%s\[[0m\n" Printf

		auto oslabel
		"osLabel" DGetProperty oslabel!

		if (oslabel@ 0 ==)
			"none or not applicable." oslabel!
		end

		oslabel@ "\[[33minstalled OS:\[[0m\[[94m\t%s\[[0m\n" Printf
	DeviceExit
end

procedure MonitorCommandBootMenu (* -- *)

end

procedure MonitorCommandDumpHeap (* -- *)
	HeapDump
end

procedure MonitorCommandHelp (* -- *)
	auto plist
	MonitorCommandList@ plist!

	auto n
	plist@ List_Head + @ n!

	ResetLines

	while (n@ 0 ~=)
		auto pnode
		n@ ListNodeValue
		pnode!

		pnode@ MonitorCommand_HelpText + @ dup if (0 ~=)
			if (WaitNext ~~)
				0 return
			end
		
			pnode@ MonitorCommand_Name + @ "\[[33m%s\[[0m\t\t%s\n" Printf
		end else drop end

		n@ ListNodeNext n!
	end
end

procedure MonitorCommandBanner (* -- *)
	"Type 'help' for commands, or 'exit' to return from the monitor.\n" Printf
end