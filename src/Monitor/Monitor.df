#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

#include "monitor.h"

var MonitorRunning 0
public MonitorRunning

var MonitorCommandList 0
public MonitorCommandList

var MonitorLine 0
public MonitorLine

var MonitorLinePoint 0
public MonitorLinePoint

var MonitorState 0
public MonitorState

var MonitorHeight 0
public MonitorHeight

extern MonitorCommandsInit { -- }

extern MonitorCommandBanner { -- }

fn DebugMonitor { state -- }
	if (MonitorCommandList@ 0 ==)
		MonitorCommandsInit
	end

	if (ConsoleOut@)
		ConsoleOut@ DeviceSelectNode
			"height" DGetProperty MonitorHeight!
		DeviceExit

		if (MonitorHeight@ 0 ==)
			25 MonitorHeight!
		end
	end

	auto savestate
	MonitorState@ savestate!

	auto saverunning
	MonitorRunning@ saverunning!

	auto saveline
	MonitorLine@ saveline!

	auto savepoint
	MonitorLinePoint@ savepoint!

	state@ MonitorState!

	1 MonitorRunning!

	256 Calloc MonitorLine!

	MonitorCommandBanner

	while (MonitorRunning@)
		MonitorPrompt
		MonitorDoLine
	end

	MonitorExit

	savepoint@ MonitorLinePoint!
	saveline@ MonitorLine!
	saverunning@ MonitorRunning!
	savestate@ MonitorState!
end

fn Monitor { -- }
	0 DebugMonitor
end

(* should be called before any command leaves the monitor, for instance 'boot' *)
fn MonitorExit { -- }
	if (MonitorLine@) MonitorLine@ Free end
end

fn MonitorParseDevPath { -- dev }
	auto word
	MonitorParseWord word!

	if (word@ strlen 0 ==)
		"empty device path.\n" Printf
		word@ Free
		0 dev! return
	end

	word@ DevTreeWalk dev!

	if (dev@ 0 ==)
		word@ "bad device path %s.\n" Printf
	end

	word@ Free
end

fn MonitorPrompt { -- }
	MonitorLine@ MonitorLinePoint!
	"> " Printf
	MonitorLine@ 255 Gets
end

fn MonitorDoLine { -- }
	auto word
	MonitorParseWord word!

	if (word@ strlen 0 ~=)
		if (word@ MonitorDoCommand ~~)
			word@ "%s is not a recognized command.\n" Printf
		end else return end
	end

	word@ Free
end

fn MonitorParseWord { -- word }
	256 Calloc word!

	if (MonitorLinePoint@ 0 ==)
		return
	end

	MonitorLinePoint@ word@ ' ' 255 strntok MonitorLinePoint!
end

fnptr MonCommand { -- }

fn MonitorDoCommand { name -- ok }
	auto plist
	MonitorCommandList@ plist!

	auto n
	plist@ List_Head + @ n!

	while (n@ 0 ~=)
		auto pnode
		n@ ListNodeValue
		pnode!

		if (pnode@ MonitorCommand_Name + @ name@ strcmp)
			name@ Free

			pnode@ MonitorCommand_Callback + @ MonCommand 1 ok! return
		end

		n@ ListNodeNext n!
	end

	0 ok!
end

fn MonitorAddCommand { helptext callback name -- }
	auto command
	MonitorCommand_SIZEOF Calloc command!

	name@ command@ MonitorCommand_Name + !
	callback@ command@ MonitorCommand_Callback + !
	helptext@ command@ MonitorCommand_HelpText + !

	(* command@ MonitorCommand_HelpText + command@ MonitorCommand_Callback + command@ MonitorCommand_Name + "namep 0x%x\ncbp 0x%x\nhtp 0x%x\n" Printf *)

	command@ MonitorCommandList@ ListInsert
end




