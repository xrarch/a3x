#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

var InterruptsVT 0

var SavedState 0
public SavedState

procedure InterruptsInit (* -- *)
	pointerof exception_limn2k _flush_all asm "

	lwi.l ev, vs, zero

	"

	64 4 * Calloc InterruptsVT!
end

asm "

exception_limn2k:
	subi.i sp, 112
	sgpr sp
	push epc
	push ers
	push lr

	swd.l vs, zero, sp
	swd.l vs, zero, ecause
	swd.l vs, zero, epc
	swd.l vs, zero, ers
	swd.l vs, zero, badaddr
	jal Exception

	li badaddr, 0

	pop lr
	pop ers
	pop epc
	lgpr sp
	addi.i sp, 112
	rfe

"

table ExceptionNames
	"Unknown"
	"Interrupt"
	"Syscall"
	"MMU fault"
	"Bus error"
	"Timer"
	"Breakpoint"
	"Invalid opcode"
	"Privilege violation"
	"Unaligned address"
	"Unaligned PC"
	"Division by zero"
endtable
const ExceptionCount 12

const Breakpoint 6

const ExtInterrupt 1

const LSICClaimComplete 0xF8030010

procedure Exception { state ecause epc ers badaddr -- }
	if (ecause@ ExtInterrupt ==)
		auto int

		LSICClaimComplete@ int!

		while (int@)
			auto h
			int@ 4 * InterruptsVT@ + @ h!

			if (h@)
				h@ Call
			end else
				int@ "Spurious interrupt: %x\n" Problem
			end

			int@ LSICClaimComplete!

			LSICClaimComplete@ int!
		end

		return
	end

	ConsoleUserOut

	ecause@ "ECAUSE: %x\n" Printf
	epc@ "EPC: %x\n" Printf
	ers@ "ERS: %x\n" Printf
	badaddr@ "BADADDR: %x\n" Printf

	if (ConsoleInMethod@ 0 ~=)
		if (ecause@ Breakpoint ==)
			epc@ "\[[7mA3X: breakpoint at 0x%x, entering monitor\[[0m\n" Printf
			state@ DebugMonitor
			return
		end else
			state@ SavedState!
			[ecause@]ExceptionNames@ "%s.\n" Problem
		end
	end else
		epc@ [ecause@]ExceptionNames@ "\n!!!FAULT!!! %s, resetting.\n" Printf

		LateReset
	end
end

procedure InterruptRegister { handler num -- }
	handler@ num@ 4 * InterruptsVT@ + !
end

procedure InterruptUnregister { num -- }
	0 num@ 4 * InterruptsVT@ + !
end

procedure InterruptEnable (* -- *)
	asm "

	bseti rs, rs, 1

	"
end

procedure InterruptDisable (* -- rs *)
	asm "

	swd.l vs, zero, rs
	bclri rs, rs, 3
	bclri rs, rs, 1
	
	"
end

procedure InterruptRestore (* rs -- *)
	asm "

	lwi.l rs, vs, zero

	"
end