#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

var InterruptsVT 0

procedure InterruptsInit (* -- *)
	auto oivt

	asm "

	pushv r5, ivt

	" oivt!

	1024 Calloc InterruptsVT!

	oivt@ FaultsCopy

	InterruptsVT@ asm "
		popv r5, r0
		cli
		mov ivt, r0
	"

	InterruptEnable
end

procedure FaultsCopy { oivt -- }
	auto i
	0 i!
	while (i@ 10 <)
		oivt@ @ i@ InterruptRegister
		1 i +=
		4 oivt +=
	end
end

procedure FaultsRegister (* -- *)
	auto i
	0 i!
	while (i@ 10 <)
		pointerof FaultsHandlerASM i@ InterruptRegister
		1 i +=
	end
end

table FaultsNames
	"Division by zero"
	"Invalid opcode"
	"Page fault"
	"Privilege violation"
	"General fault"
	"Breakpoint"
	"Unknown"
	"Bus error"
	"Unknown"
	"Spurious interrupt"
endtable
public FaultsNames

const Breakpoint 5

procedure FaultsHandler { num loc fa -- }
	auto rs
	InterruptDisable rs!

	ConsoleUserOut

	if (ConsoleInMethod@ 0 ~=)
		if (num@ Breakpoint ==)
			loc@ "\[[7mA3X: breakpoint at 0x%x, entering monitor\[[0m\n" Printf
			Monitor
			return
		end else
			fa@ [num@]FaultsNames@ "%s at 0x%x.\n" Problem
		end
	end else
		loc@ [num@]FaultsNames@ "\n!!!FAULT!!! %s at %x, resetting.\n" Printf

		LateReset
	end
end

asm "

FaultsHandlerASM:
	pop k3 ;rs
	pop k2 ;r0
	pop k1 ;pc

	push k1
	push k2
	push k3

	pusha

	pushv r5, r0

	pushv r5, k1

	pushv r5, fa

	call FaultsHandler

	popa

	iret
"

procedure InterruptRegister { handler num -- }
	handler@ num@ 4 * InterruptsVT@ + !
end

procedure InterruptEnable (* -- *)
	asm "

	bseti rs, rs, 1

	"
end

procedure InterruptDisable (* -- rs *)
	asm "

	mov r0, rs
	bclri rs, rs, 1
	pushv r5, r0

	"
end

procedure InterruptRestore (* rs -- *)
	asm "

	popv r5, r0
	mov rs, r0

	"
end