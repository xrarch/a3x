#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

var InterruptsVT 0

var SavedState 0
public SavedState

extern setvector { -- }

fn InterruptsInit { -- }
	setvector

	64 4 * Calloc InterruptsVT!
end

asm "

setvector:
	la ev, exception_limn2k
	ret

exception_limn2k:
	subi.i sp, 112
	sgpr sp
	push epc
	push ers
	push lr

	mov t0, sp
	subi.i sp, 12
	sio.l sp, 8, t0
	siio.l sp, 4, 0
	s.l sp, zero, zero

	mov a3, ecause
	mov a2, epc
	mov a1, ers
	mov a0, badaddr
	jal Exception

	addi.i sp, 12

	li badaddr, 0

	pop lr
	pop ers
	pop epc
	lgpr sp
	addi.i sp, 112
	rfe

"

table ExceptionNames
	"Unknown"
	"Interrupt"
	"Syscall"
	"MMU fault"
	"Bus error"
	"Timer"
	"Breakpoint"
	"Invalid opcode"
	"Privilege violation"
	"Unaligned address"
	"Unaligned PC"
	"Division by zero"
endtable
const ExceptionCount 12

const Breakpoint 6

const ExtInterrupt 1

const LSICClaimComplete 0xF8030010

fnptr IntHandler { -- }

fn Exception { state ecause epc ers badaddr -- }
	if (ecause@ ExtInterrupt ==)
		auto int

		LSICClaimComplete@ int!

		while (int@)
			auto h
			int@ 4 * InterruptsVT@ + @ h!

			if (h@)
				h@ IntHandler
			end else
				int@ "Spurious interrupt: %x\n" Problem
			end

			int@ LSICClaimComplete!

			LSICClaimComplete@ int!
		end

		return
	end

	ConsoleUserOut

	ecause@ "ECAUSE: %x\n" Printf
	epc@ "EPC: %x\n" Printf
	ers@ "ERS: %x\n" Printf
	badaddr@ "BADADDR: %x\n" Printf

	if (ConsoleInMethod@ 0 ~=)
		if (ecause@ Breakpoint ==)
			epc@ "\[[7mA3X: breakpoint at 0x%x, entering monitor\[[0m\n" Printf
			state@ DebugMonitor
			return
		end else
			state@ SavedState!
			[ecause@]ExceptionNames@ "%s.\n" Problem
		end
	end else
		epc@ [ecause@]ExceptionNames@ "\n!!!FAULT!!! %s, resetting.\n" Printf

		LateReset
	end
end

fn InterruptRegister { handler num -- }
	handler@ num@ 4 * InterruptsVT@ + !
end

fn InterruptUnregister { num -- }
	0 num@ 4 * InterruptsVT@ + !
end

asm "

InterruptEnable:
.global InterruptEnable
	bseti rs, rs, 1
	ret

InterruptDisable:
.global InterruptDisable
	mov v0, rs
	bclri rs, rs, 3
	bclri rs, rs, 1
	ret

InterruptRestore:
.global InterruptRestore
	mov rs, a0
	ret

"