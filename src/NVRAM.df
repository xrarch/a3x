#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

fn NVRAMCheck { -- ok }
	if (NVRAMHeader_Magic NVRAMOffset @ NVRAMMagic ==)
		1 ok!
	end else
		0 ok!
	end
end

fn NVRAMFormat { -- }
	NVRAMBase NVRAMSize 0 memset

	NVRAMMagic NVRAMHeader_Magic NVRAMOffset !
end

fn NVRAMOffset { loc -- nvaddr }
	if (loc@ NVRAMSize >=)
		0 nvaddr!
		return
	end

	loc@ NVRAMBase + nvaddr!
end

fn NVRAMFindFree { -- free }
	auto i
	0 i!

	auto sp
	NVRAMHeader_SIZEOF sp!
	while (i@ NVRAMVarCount <)
		if (sp@ NVRAMOffset gb 0 ==)
			sp@ NVRAMOffset free! return
		end

		sp@ NVRAMVariable_SIZEOF + sp!
		1 i +=
	end

	0 free! return
end

fn NVRAMDeleteVar { name -- }
	auto vl
	name@ NVRAMGetVar vl!

	if (vl@ 0 ==) return end

	0 vl@ NVRAMVariable_Contents - sb
end

fn NVRAMSetVar { str name -- }
	auto vl
	name@ NVRAMGetVar vl!

	if (vl@ 0 ==) (* doesnt exist, we need to make it *)
		NVRAMFindFree vl!

		if (vl@ 0 ==) (* no free space, abort *)
			return
		end

		vl@ name@ strcpy
		vl@ NVRAMVariable_Contents + str@ strcpy
	end else
		vl@ str@ strcpy
	end
end

fn NVRAMSetVarNum { num name -- }
	auto buf
	15 Calloc buf!

	num@ buf@ itoa
	buf@ name@ NVRAMSetVar

	buf@ Free
end

fn NVRAMDefaultGetVar { default name -- ptr }
	name@ NVRAMGetVar ptr!

	if (ptr@ 0 ==)
		default@ name@ NVRAMSetVar
		default@ ptr!
	end
end

fn NVRAMGetVar { name -- ptr }
	auto i
	0 i!

	auto sp
	NVRAMHeader_SIZEOF sp!
	while (i@ NVRAMVarCount <)
		if (sp@ NVRAMOffset name@ strcmp)
			sp@ NVRAMVariable_Contents + NVRAMOffset ptr!
			return
		end

		sp@ NVRAMVariable_SIZEOF + sp!
		1 i +=
	end

	0 ptr!
	return
end

fn NVRAMGetVarNum { var -- n }
	var@ NVRAMGetVar n!

	if (n@)
		n@ atoi n!
	end
end

fn NVRAMDefaultGetVarNum { default var -- n }
	auto qb
	16 Malloc qb!
	default@ qb@ itoa

	qb@ var@ NVRAMDefaultGetVar n!

	qb@ Free

	if (n@)
		n@ atoi n!
	end
end