#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

(* a3x driver for kinnowfb video board *)

const LGSlotMID 0x4B494E36

const LGVRAMOffset 0x100000

const LGCommandOffset 0x2000

const LGRegScreen 0x3000
const LGRegVRAM   0x3004
const LGRegRead   0x3008
const LGRegWrite  0x300C
const LGRegCursor 0x3010
const LGRegStatus 0x3014
const LGRegMode   0x3018
const LGRegCause  0x301C
const LGRegCurPos 0x3020

var LGSlotBottom 0

var LGVRAM 0

var LGWidth 0
var LGHeight 0

var LGDMANode 0

var LGFXNeedsInit 1

var LGDMATransfer 0

var LGFB 0

fn BuildKinnowFB { -- }
	auto slot
	LGSlotMID EBusFindFirstBoard slot!

	if (slot@ ERR ==)
		return
	end

	auto sbe

	slot@ EBusSlotSpace * EBusSlotsStart + dup sbe! LGSlotBottom!

	auto fb
	sbe@ LGVRAMOffset + dup fb! LGVRAM!

	auto wh
	sbe@ LGRegScreen + @ wh! 

	auto w
	wh@ 0xFFF & w!

	auto h
	wh@ 12 >> 0xFFF & h!

	DeviceNew
		"kinnowfb" DSetName

		fb@ "framebuffer" DAddProperty
		w@ "width" DAddProperty
		h@ "height" DAddProperty
		8 "depth" DAddProperty

		fb@ "vram" DAddProperty

		sbe@ LGRegVRAM + @ "vramSize" DAddProperty

		"display" "deviceType" DAddProperty

		"AISA,kinnowfb8" "model" DAddProperty

		slot@ "ebus,unit" DAddProperty

		sbe@ "address" DAddProperty

		1 "revision" DAddProperty

		pointerof LGFXRectangleM "rectangle" DAddMethod
		pointerof LGFXBlitBitsM "blitBits" DAddMethod
		pointerof LGFXScrollM "scroll" DAddMethod
		pointerof LGFXInit "init" DAddMethod
	DeviceExit

	w@ LGWidth!
	h@ LGHeight!

	fb@ LGFB!
end

fn LGFXInit { argvt argcn -- out1 out2 out3 }
	if (LGFXNeedsInit@)
		0 0 LGWidth@ LGHeight@ "screen-bg" NVRAMGetVarNum LGFXRectangle

		0 LGFXNeedsInit!
	end
end

fn private LGFXRectangleM { argvt argcn -- out1 out2 out3 }
	argvt@ 16 + @
	argvt@ 12 + @
	argvt@ 8 + @
	argvt@ 4 + @
	argvt@ @
	LGFXRectangle
end

fn LGFXRectangle { x y w h color -- }
	auto row
	0 row!

	auto v
	color@ color@ 8 << | color@ 16 << | color@ 24 << | v!

	auto ptr
	y@ LGWidth@ * x@ + LGFB@ + ptr!

	auto mod
	LGWidth@ mod!

	auto rowsz
	w@ rowsz!

	while (row@ h@ <)
		ptr@ rowsz@ v@ memset

		1 row +=
		mod@ ptr +=
	end
end

fn private LGFXBlitBitsM { argvt argcn -- out1 out2 out3 }
	argvt@ 32 + @
	argvt@ 28 + @
	argvt@ 24 + @
	argvt@ 20 + @
	argvt@ 16 + @
	argvt@ 12 + @
	argvt@ 8 + @
	argvt@ 4 + @
	argvt@ @
	LGFXBlitBits
end

fn LGFXBlitBitsFast { bpr fg bg bitd ptr dest mod w h -- }
	// this function is so big because its overly optimized.

	// emulates the function of the old "DMA board" that was removed
	// from the XRstation architecture for being too complex

	auto i
	auto j
	auto byte

	auto jcmp
	256 jcmp!

	auto m1cmp
	-1 m1cmp!

	if (bitd@ ~~) // least significant is leftmost
		if (bg@ m1cmp@ ==)
			if (fg@ m1cmp@ ==)
				return
			end

			while (h@)
				bpr@ i!

				while (i@)
					ptr@ gb byte!

					1 j!

					while (j@ jcmp@ <)
						if (byte@ j@ &)
							fg@ dest@ sb
						end

						1 dest +=
						1 j <<=
					end

					1 i -=
					1 ptr +=
				end

				mod@ dest +=
				1 h -=
			end
		end else
			while (h@)
				bpr@ i!

				while (i@)
					ptr@ gb byte!

					1 j!

					while (j@ jcmp@ <)
						if (byte@ j@ &)
							if (fg@ m1cmp@ ~=)
								fg@ dest@ sb
							end
						end else
							bg@ dest@ sb
						end

						1 dest +=
						1 j <<=
					end

					1 i -=
					1 ptr +=
				end

				mod@ dest +=
				1 h -=
			end
		end
	end else // most significant is leftmost
		if (bg@ m1cmp@ ==)
			if (fg@ m1cmp@ ==)
				return
			end

			while (h@)
				bpr@ i!

				while (i@)
					ptr@ gb byte!

					128 j!

					while (j@)
						if (byte@ j@ &)
							fg@ dest@ sb
						end

						1 dest +=
						1 j >>=
					end

					1 i -=
					1 ptr +=
				end

				mod@ dest +=
				1 h -=
			end
		end else
			while (h@)
				bpr@ i!

				while (i@)
					ptr@ gb byte!

					128 j!

					while (j@)
						if (byte@ j@ &)
							if (fg@ m1cmp@ ~=)
								fg@ dest@ sb
							end
						end else
							bg@ dest@ sb
						end

						1 dest +=
						1 j >>=
					end

					1 i -=
					1 ptr +=
				end

				mod@ dest +=
				1 h -=
			end
		end
	end
end

fn LGFXBlitBits { bpr fg bg bitd ptr x y w h -- }
	auto dest
	y@ LGWidth@ * x@ + LGFB@ + dest!

	auto mod
	LGWidth@ w@ - mod!

	bpr@ fg@ bg@ bitd@ ptr@ dest@ mod@ w@ h@
	LGFXBlitBitsFast
end

fn LGFXScrollM { argvt argcn -- out1 out2 out3 }
	argvt@ 20 + @
	argvt@ 16 + @
	argvt@ 12 + @
	argvt@ 8 + @
	argvt@ 4 + @
	argvt@ @
	LGFXScroll
end

fn LGFXScroll { x y w h color rows -- }
	auto row
	0 row!

	auto dest
	y@ LGWidth@ * x@ + LGFB@ + dest!

	auto src
	y@ rows@ + LGWidth@ * x@ + LGFB@ + src!

	auto mod
	LGWidth@ mod!

	auto rowsz
	w@ rowsz!

	auto rh
	h@ rows@ - rh!

	while (row@ rh@ <)
		dest@ src@ rowsz@ memcpy

		1 row +=
		mod@ src +=
		mod@ dest +=
	end

	if (color@ -1 ~=)
		x@ y@ h@ + rows@ - w@ rows@ color@ LGFXRectangle
	end
end