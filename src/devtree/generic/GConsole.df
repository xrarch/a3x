#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

var GCGWidth 0
var GCGHeight 0

var GCColorBG 0x00
var GCColorFG 0x00

var GCColorDefBG 0x00
var GCColorDefFG 0x00

var GCCurX 0
var GCCurY 0

var GCWidth 0
var GCHeight 0

const GConsoleBG 0x394C
const GConsoleFG 0x7FFF

var GCScreenNode 0

var GCNeedsDraw 1

var GCInitialConfig 1

var GCEscape 0

var GCLineLenBuf 0

var GCRectP 0
var GCScrollP 0

var GConsoleX 0
var GConsoleY 0

var GConsoleModified 0

var GCInverted 0

table ColorIndex
	0
	0x14
	0x1C0
	0x3FF
	0x5000
	0x7C1F
	0x7FE0
	0x5AD6
endtable

table ColorIndex2
	0x1CE7
	0x5B1F
	0x5FEF
	0x5BFF
	0x7F56
	0x7DFF
	0x7FF6
	0x7FFF
endtable

fn GConsoleDefault { -- }
	GCScreenNode@ DeviceSelectNode
		"width" DGetProperty GCGWidth!
		"height" DGetProperty GCGHeight!
	DeviceExit

	(* "screen-bg" NVRAMGetVarNum dup *) GConsoleBG dup GCColorDefBG! GCColorBG!
	(* "screen-fg" NVRAMGetVarNum dup *) GConsoleFG dup GCColorDefFG! GCColorFG!

	if ("console-rows" NVRAMGetVar 0 ==)
		34 "console-rows" NVRAMSetVarNum
	end
	if ("console-cols" NVRAMGetVar 0 ==)
		80 "console-cols" NVRAMSetVarNum
	end

	auto crows
	"console-rows" NVRAMGetVarNum crows!
	auto ccols
	"console-cols" NVRAMGetVarNum ccols!

	GCGWidth@ FontWidth / ccols@ min GCWidth!
	GCGHeight@ FontHeight / crows@ min GCHeight!

	GCGWidth@ 2 / GCWidth@ FontWidth * 2 / - GConsoleX!
	GCGHeight@ 2 / GCHeight@ FontHeight * 2 / - GConsoleY!

	0 GCCurX!
	0 GCCurY!

	GCLineLenBuf@ GCHeight@ 4 * 0 memset

	1 GCInitialConfig!
	1 GCNeedsDraw!
end

fn BuildGConsole { -- }
	"/screen" DevTreeWalk GCScreenNode!
	if (GCScreenNode@ 0 ==)
		return
	end

	1024 Calloc GCLineLenBuf!

	GCScreenNode@ DeviceSelectNode
		"rectangle" DGetMethod GCRectP!
		"scroll" DGetMethod GCScrollP!
	DeviceExit

	DeviceNew
		"gconsole" DSetName

		pointerof GConsolePutCharM "write" DAddMethod
		pointerof GConsoleSuppressDrawM "nodraw" DAddMethod

		FontWidth "fontWidth" DAddProperty
		FontHeight "fontHeight" DAddProperty

		"serial" "deviceType" DAddProperty

		"a3x,gconsole" "model" DAddProperty
	DeviceExit

	GConsoleDefault
end

fn private GConsoleSuppressDrawM { argvt argcn -- out1 out2 out3 }
	GConsoleSuppressDraw
end

fn GConsoleSuppressDraw { -- }
	0 GCNeedsDraw!
end

fn GConsoleSetScreen { fg bg x y w h -- }
	if (x@ -1 ==)
		GConsoleDefault
		return
	end

	x@ GConsoleX!
	y@ GConsoleY!

	0 GCCurX!
	0 GCCurY!

	w@ dup FontWidth / GCWidth! GCGWidth!
	h@ dup FontHeight / GCHeight! GCGHeight!

	fg@ dup GCColorFG! GCColorDefFG!
	bg@ dup GCColorBG! GCColorDefBG!

	GCLineLenBuf@ GCHeight@ 4 * 0 memset

	0 GCInitialConfig!
end

fn GConsoleModifiedF { -- modified }
	GConsoleModified@ modified!

	0 GConsoleModified!
end

fn GConsoleLongestLine { -- width }
	auto i
	0 i!

	0 width!

	while (i@ GCHeight@ <)
		auto len
		i@ 4 * GCLineLenBuf@ + @ len!

		if (len@ width@ >)
			len@ width!
		end

		1 i +=
	end
end

fn GConsoleClear { -- }
	0 0 GConsoleLongestLine FontWidth * GCHeight@ FontHeight * GCColorBG@ GConsoleRect

	0 GCCurX!
	0 GCCurY!

	GCLineLenBuf@ GCHeight@ 4 * 0 memset

	1 GConsoleModified!
end

fn GConsoleRRect { x y w h color -- }
	GCScreenNode@ DeviceSelectNode
		x@ y@ w@ h@ color@ GCRectP@ DCallMethodPtr drop drop drop
	DeviceExit
end

fn GConsoleRect { x y w h color -- }
	GCScreenNode@ DeviceSelectNode
		x@ GConsoleX@ +
		y@ GConsoleY@ +
		w@ h@
		color@
		GCRectP@ DCallMethodPtr drop drop drop
	DeviceExit
end

fn GConsoleScroll { rows -- }
	GCScreenNode@ DeviceSelectNode
		GConsoleX@ GConsoleY@
		GConsoleLongestLine FontWidth *
		FontHeight GCHeight@ *
		GCColorDefBG@
		rows@ FontHeight *
		GCScrollP@ DCallMethodPtr drop drop drop
	DeviceExit

	auto k
	GCHeight@ k!

	auto gclb
	GCLineLenBuf@ gclb!

	auto r
	gclb@ r!

	auto max
	GCHeight@ rows@ - 4 * gclb@ + max!

	while (r@ max@ <)
		r@ rows@ 4 * + @ r@ !
		4 r +=
	end

	GCHeight@ rows@ - 4 * gclb@ + r!
	GCHeight@ 4 * gclb@ + max!

	while (r@ max@ <)
		0 r@ !
		4 r +=
	end

	1 GConsoleModified!
end

fn GConsoleDoCur { color -- }
	GCCurX@ FontWidth * GCCurY@ FontHeight * FontWidth FontHeight color@ GConsoleRect

	1 GConsoleModified!
end

fn GConsoleClearCur { -- }
	GCColorBG@ GConsoleDoCur
end

fn GConsoleDrawCur { -- }
	GCColorFG@ GConsoleDoCur
end

fn GConsoleNewline { -- }
	GCCurX@ GCCurY@ 4 * GCLineLenBuf@ + !

	0 GCCurX!
	GCCurY@ 1 + GCCurY!

	if (GCCurY@ GCHeight@ >=)
		GCHeight@ 1 - GCCurY!
		0 GCCurX!
		1 GConsoleScroll
	end
end

fn GConsoleBack { -- }
	if (GCCurX@ 0 ==)
		if (GCCurY@ 0 >)
			GCCurY@ 1 - GCCurY!
			GCWidth@ 1 - GCCurX!
		end
		return
	end

	GCCurX@ 1 - GCCurX!
end

fn GConsoleUIBox { title x y w h -- }
	x@ y@ w@ h@ 0x7FFF GConsoleRRect
	x@ 1 + y@ 1 + w@ h@ 0x4210 GConsoleRRect
	x@ 1 + y@ 1 + w@ 1 - h@ 1 - 0x6318 GConsoleRRect
	x@ 10 + y@ 20 + w@ 18 - h@ 28 - 0x7FFF GConsoleRRect
	x@ 10 + y@ 20 + w@ 19 - h@ 29 - 0x4210 GConsoleRRect
	x@ 11 + y@ 21 + w@ 21 - h@ 31 - 0x7FFF GConsoleRRect
	x@ 12 + y@ 22 + w@ 22 - h@ 32 - 0x6318 GConsoleRRect

	auto tw
	title@ strlen FontWidth * tw!

	x@ w@ 2 / tw@ 2 / - +
	y@ 3 +
	title@
	-1
	0
	FontDrawString
end

fn VConsoleDraw { -- }
	if (GConsoleX@ 80 >= GConsoleY@ 80 >= &&) (* there is at least GConsoleMargin/2 pixels around the edge, do a pretty box *)
		"LIMNstation"
		GConsoleX@ 15 -
		GConsoleY@ 25 -
		GCWidth@ FontWidth * 30 +
		GCHeight@ FontHeight * 40 +
		GConsoleUIBox

		GConsoleX@ 4 -
		GConsoleY@ 4 -
		GCWidth@ FontWidth * 10 +
		GCHeight@ FontHeight * 10 +
		GConsoleBG
		GConsoleRRect
	end else (* un-pretty box *)
		0 0 GCGWidth@ GCGHeight@ GConsoleBG GConsoleRRect
	end
end

fn GConsoleDraw { -- }
	if (GCInitialConfig@)
		GCScreenNode@ DeviceSelectNode
			"init" DCallMethod drop drop drop drop
		DeviceExit

		VConsoleDraw
	end
end

fn GConsoleTab { -- }
	GCCurX@ 8 / 1 + 8 * GCCurX!

	if (GCCurX@ GCWidth@ >=)
		GConsoleNewline
	end
end

table GCEVT
	0
	0
	0
	0
endtable

const GCEVC 4

var GCEV 0

fn GConsoleSetColor { -- }
	auto color

	if ([0]GCEVT@ 0 ==)
		GCColorDefFG@ GCColorFG!
		GCColorDefBG@ GCColorBG!

		0 GCInverted!
	end elseif ([0]GCEVT@ 7 ==)
		if (GCInverted@ ~~)
			GCColorFG@ color!
			GCColorBG@ GCColorFG!
			color@ GCColorBG!

			1 GCInverted!
		end
	end elseif ([0]GCEVT@ 39 ==)
		GCColorDefFG@ GCColorFG!
	end elseif ([0]GCEVT@ 49 ==)
		GCColorDefBG@ GCColorBG!
	end elseif ([0]GCEVT@ 30 >= [0]GCEVT@ 37 <= &&) (* foreground, first 8 *)
		[0]GCEVT@ 30 - color!

		[color@]ColorIndex@ GCColorFG!
	end elseif ([0]GCEVT@ 40 >= [0]GCEVT@ 47 <= &&) (* background, first 8 *)
		[0]GCEVT@ 40 - color!

		[color@]ColorIndex@ GCColorBG!
	end elseif ([0]GCEVT@ 90 >= [0]GCEVT@ 97 <= &&) (* foreground, second 8 *)
		[0]GCEVT@ 90 - color!

		[color@]ColorIndex2@ GCColorFG!
	end elseif ([0]GCEVT@ 100 >= [0]GCEVT@ 107 <= &&) (* background, second 8 *)
		[0]GCEVT@ 100 - color!

		[color@]ColorIndex2@ GCColorBG!
	end elseif ([1]GCEVT@ 5 ==)
		if ([0]GCEVT@ 38 ==)
			[2]GCEVT@ GCColorFG!
		end elseif ([0]GCEVT@ 48 ==)
			[2]GCEVT@ GCColorBG!
		end
	end

	GConsoleDrawCur
end

fn GConsoleClearLine { -- }
	auto ox
	GCCurX@ ox!

	while (GCCurX@ 0 >)
		'\b' GConsolePutChar
	end

	ox@ GCCurX!
end

fn GConsoleReset { -- }
	GCColorDefFG@ GCColorFG!
	GCColorDefBG@ GCColorBG!

	0 GCInverted!

	GConsoleClear
end

fn GConsoleParseEscape { c -- }
	if (c@ '0' >= c@ '9' <= &&)
		auto np
		GCEV@ 4 * GCEVT + np!

		10 np@ *=
		c@ '0' - np@ +=

		return
	end

	if (c@ '[' ==) return end
	elseif (c@ ';' ==) GCEV@ 1 + GCEVC % GCEV! return end
	elseif (c@ 'm' ==) GConsoleSetColor end
	elseif (c@ 'c' ==) GConsoleReset end
	elseif (c@ 'K' ==) GConsoleClearLine end

	0 GCEscape!
end

fn private GConsolePutCharM { argvt argcn -- out1 out2 out3 }
	argvt@ @
	GConsolePutChar
end

fn GConsolePutChar { char -- }
	if (char@ 255 >)
		return
	end

	if (GCNeedsDraw@)
		GConsoleDraw
		0 GCNeedsDraw!
	end

	if (GCEscape@) char@ GConsoleParseEscape return end

	if (char@ 0x1b ==)
		0 GCEV!
		1 GCEscape!
		GCEVT GCEVC 4 * 0 memset
		return
	end

	GConsoleClearCur

	char@ GConsolePutCharF

	GConsoleDrawCur
end

fn GConsolePutCharF { char -- }
	if (char@ '\n' ==)
		GConsoleNewline
		return
	end elseif (char@ '\b' ==)
		GConsoleBack
		return
	end elseif (char@ '\t' ==)
		GConsoleTab
		return
	end elseif (char@ '\r' ==)
		0 GCCurX!
		return
	end

	GCCurX@ FontWidth * GConsoleX@ +
	GCCurY@ FontHeight * GConsoleY@ +
	char@
	GCColorBG@
	GCColorFG@
	FontDrawChar

	GCCurX@ 1 + GCCurX!

	if (GCCurX@ GCWidth@ >=)
		GConsoleNewline
	end
end