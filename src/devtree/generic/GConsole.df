#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

var GCGWidth 0
var GCGHeight 0

var GCColorBG 0x00
var GCColorFG 0x00

var GCColorDefBG 0x00
var GCColorDefFG 0x00

var GCCurX 0
var GCCurY 0

var GCWidth 0
var GCHeight 0

const GConsoleBG 75
const GConsoleFG 255

var GCScreenNode 0

var GCNeedsDraw 1

var GCInitialConfig 1

var GCEscape 0

var GCLineLenBuf 0

var GCRectP 0
var GCScrollP 0

var GConsoleX 0
var GConsoleY 0

var GConsoleModified 0

var GCInverted 0

var GCFancy 0

table ColorIndex
	0
	16
	96
	249
	4
	31
	231
	181
endtable

table ColorIndex2
	74
	221
	246
	253
	215
	159
	247
	255
endtable

fn GConsoleDefault { -- }
	GCScreenNode@ DeviceSelectNode
		"width" DGetProperty GCGWidth!
		"height" DGetProperty GCGHeight!
	DeviceExit

	if ("true" "fancy?" NVRAMDefaultGetVar "true" strcmp)
		1 GCFancy!

		(* "screen-bg" NVRAMGetVarNum dup *) GConsoleBG dup GCColorDefBG! GCColorBG!
		(* "screen-fg" NVRAMGetVarNum dup *) GConsoleFG dup GCColorDefFG! GCColorFG!

		if ("console-rows" NVRAMGetVar 0 ==)
			30 "console-rows" NVRAMSetVarNum
		end
		if ("console-cols" NVRAMGetVar 0 ==)
			80 "console-cols" NVRAMSetVarNum
		end

		auto crows
		"console-rows" NVRAMGetVarNum crows!
		auto ccols
		"console-cols" NVRAMGetVarNum ccols!

		GCGWidth@ FontWidth / ccols@ min GCWidth!
		GCGHeight@ FontHeight / crows@ min GCHeight!

		GCGWidth@ 2 / GCWidth@ FontWidth * 2 / - GConsoleX!
		GCGHeight@ 2 / GCHeight@ FontHeight * 2 / - GConsoleY!
	end else
		0 GCFancy!

		GCGWidth@ FontWidth / GCWidth!
		GCGHeight@ FontHeight / GCHeight!

		0 dup GCColorDefBG! GCColorBG!
		255 dup GCColorDefFG! GCColorFG!

		0 GConsoleX!
		0 GConsoleY!
	end

	0 GCCurX!
	0 GCCurY!

	GCLineLenBuf@ GCHeight@ 4 * 0 memset

	1 GCInitialConfig!
	1 GCNeedsDraw!
end

fn BuildGConsole { -- }
	"/screen" DevTreeWalk GCScreenNode!
	if (GCScreenNode@ 0 ==)
		return
	end

	1024 Calloc GCLineLenBuf!

	GCScreenNode@ DeviceSelectNode
		"rectangle" DGetMethod GCRectP!
		"scroll" DGetMethod GCScrollP!
	DeviceExit

	GConsoleDefault

	DeviceNew
		"gconsole" DSetName

		pointerof GConsolePutCharM "write" DAddMethod
		pointerof GConsoleSuppressDrawM "nodraw" DAddMethod

		FontWidth "fontWidth" DAddProperty
		FontHeight "fontHeight" DAddProperty

		"serial" "deviceType" DAddProperty

		"a3x,gconsole" "model" DAddProperty

		GCWidth@ "width" DAddProperty
		GCHeight@ "height" DAddProperty
	DeviceExit
end

fn private GConsoleSuppressDrawM { argvt argcn -- out1 out2 out3 }
	GConsoleSuppressDraw
end

fn GConsoleSuppressDraw { -- }
	0 GCNeedsDraw!
end

fn GConsoleSetScreen { fg bg x y w h -- }
	if (x@ -1 ==)
		GConsoleDefault
		return
	end

	x@ GConsoleX!
	y@ GConsoleY!

	0 GCCurX!
	0 GCCurY!

	w@ dup FontWidth / GCWidth! GCGWidth!
	h@ dup FontHeight / GCHeight! GCGHeight!

	fg@ dup GCColorFG! GCColorDefFG!
	bg@ dup GCColorBG! GCColorDefBG!

	GCLineLenBuf@ GCHeight@ 4 * 0 memset

	0 GCInitialConfig!
end

fn GConsoleModifiedF { -- modified }
	GConsoleModified@ modified!

	0 GConsoleModified!
end

fn GConsoleLongestLine { -- width }
	auto i
	0 i!

	0 width!

	while (i@ GCHeight@ <)
		auto len
		i@ 4 * GCLineLenBuf@ + @ len!

		if (len@ width@ >)
			len@ width!
		end

		1 i +=
	end
end

fn GConsoleClear { -- }
	0 0 GConsoleLongestLine FontWidth * GCHeight@ FontHeight * GCColorBG@ GConsoleRect

	0 GCCurX!
	0 GCCurY!

	GCLineLenBuf@ GCHeight@ 4 * 0 memset

	1 GConsoleModified!
end

fn GConsoleRRect { x y w h color -- }
	GCScreenNode@ DeviceSelectNode
		x@ y@ w@ h@ color@ GCRectP@ DCallMethodPtr drop drop drop
	DeviceExit
end

fn GConsoleRect { x y w h color -- }
	GCScreenNode@ DeviceSelectNode
		x@ GConsoleX@ +
		y@ GConsoleY@ +
		w@ h@
		color@
		GCRectP@ DCallMethodPtr drop drop drop
	DeviceExit
end

fn GConsoleScroll { rows -- }
	auto i
	0 i!

	auto gclb
	GCLineLenBuf@ gclb!

	auto k
	GCHeight@ 1 - k!

	auto y
	GConsoleY@ y!

	auto gcx
	GConsoleX@ gcx!

	auto bg
	GCColorDefBG@ bg!

	auto scrollp
	GCScrollP@ scrollp!

	auto tll
	auto nll

	auto h
	GCHeight@ h!

	GCScreenNode@ DeviceSelectNode

	while (i@ k@ <)
		gclb@@ tll!
		gclb@ 4 + @ nll!

		gcx@ y@
		tll@ nll@ max FontWidth *
		FontHeight rows@ 1 + *
		-1
		rows@ FontHeight *
		scrollp@ DCallMethodPtr drop drop drop

		if (tll@ nll@ >)
			gcx@ nll@ FontWidth * + y@
			tll@ nll@ - FontWidth *
			FontHeight
			bg@
			GConsoleRRect
		end

		rows@ FontHeight * y +=
		1 i +=

		nll@ gclb@!

		4 gclb +=
	end

	DeviceExit

	GCLineLenBuf@ gclb!

	GConsoleX@
	GConsoleY@ h@ FontHeight * + FontHeight -
	GCHeight@ 1 - 4 * gclb@ + @ FontWidth * FontHeight bg@ GConsoleRRect

	0 GCHeight@ 1 - 4 * gclb@ + !
end

fn GConsoleDoCur { color -- }
	GCCurX@ FontWidth * GCCurY@ FontHeight * FontWidth FontHeight color@ GConsoleRect

	1 GConsoleModified!
end

fn GConsoleClearCur { -- }
	GCColorBG@ GConsoleDoCur
end

fn GConsoleDrawCur { -- }
	GCColorFG@ GConsoleDoCur
end

fn GConsoleNewline { -- }
	GCCurX@ GCCurY@ 4 * GCLineLenBuf@ + !

	0 GCCurX!
	GCCurY@ 1 + GCCurY!

	if (GCCurY@ GCHeight@ >=)
		GCHeight@ 1 - GCCurY!
		0 GCCurX!
		1 GConsoleScroll
	end
end

fn GConsoleBack { -- }
	if (GCCurX@ 0 ==)
		if (GCCurY@ 0 >)
			GCCurY@ 1 - GCCurY!
			GCWidth@ 1 - GCCurX!
		end
		return
	end

	GCCurX@ 1 - GCCurX!
end

fn private Box { x y w h color -- }
	x@ y@ w@ 1 color@ GConsoleRRect
	x@ y@ h@ + 1 - w@ 1 color@ GConsoleRRect

	x@ y@ 1 + 1 h@ 2 - color@ GConsoleRRect
	x@ w@ + 1 - y@ 1 + 1 h@ 2 - color@ GConsoleRRect
end

fn GConsoleUIBox { title x y w h -- }
	x@ y@ w@ h@ 255 Box
	x@ 1 + y@ 1 + w@ h@ 148 Box
	x@ 1 + y@ 1 + w@ 1 - h@ 1 - 222 GConsoleRRect
	x@ 10 + y@ 20 + w@ 18 - h@ 28 - 255 Box
	x@ 10 + y@ 20 + w@ 19 - h@ 29 - 148 Box
	x@ 11 + y@ 21 + w@ 21 - h@ 31 - 255 Box
	x@ 12 + y@ 22 + w@ 22 - h@ 32 - 222 Box

	auto tw
	title@ strlen FontWidth * tw!

	x@ w@ 2 / tw@ 2 / - +
	y@ 3 +
	title@
	-1
	0
	FontDrawString
end

fn VConsoleDraw { -- }
	if (GConsoleX@ 60 >= GConsoleY@ 60 >= && GCFancy@ &&) (* there is at least GConsoleMargin/2 pixels around the edge, do a pretty box *)
		GCScreenNode@ DeviceSelectNode
			"init" DCallMethod drop drop drop drop
		DeviceExit

		"LIMNstation"
		GConsoleX@ 15 -
		GConsoleY@ 25 -
		GCWidth@ FontWidth * 30 +
		GCHeight@ FontHeight * 40 +
		GConsoleUIBox

		GConsoleX@ 4 -
		GConsoleY@ 4 -
		GCWidth@ FontWidth * 10 +
		GCHeight@ FontHeight * 10 +
		GConsoleBG
		GConsoleRRect
	end else (* un-pretty box *)
		0 0 GCGWidth@ GCGHeight@ GCColorDefBG@ GConsoleRRect
	end
end

fn GConsoleDraw { -- }
	if (GCInitialConfig@)
		VConsoleDraw
	end
end

fn GConsoleTab { -- }
	GCCurX@ 8 / 1 + 8 * GCCurX!

	if (GCCurX@ GCWidth@ >=)
		GConsoleNewline
	end
end

table GCEVT
	0
	0
	0
	0
endtable

const GCEVC 4

var GCEV 0

fn GConsoleSetColor { -- }
	auto color

	if ([0]GCEVT@ 0 ==)
		GCColorDefFG@ GCColorFG!
		GCColorDefBG@ GCColorBG!

		0 GCInverted!
	end elseif ([0]GCEVT@ 7 ==)
		if (GCInverted@ ~~)
			GCColorFG@ color!
			GCColorBG@ GCColorFG!
			color@ GCColorBG!

			1 GCInverted!
		end
	end elseif ([0]GCEVT@ 39 ==)
		GCColorDefFG@ GCColorFG!
	end elseif ([0]GCEVT@ 49 ==)
		GCColorDefBG@ GCColorBG!
	end elseif ([0]GCEVT@ 30 >= [0]GCEVT@ 37 <= &&) (* foreground, first 8 *)
		[0]GCEVT@ 30 - color!

		[color@]ColorIndex@ GCColorFG!
	end elseif ([0]GCEVT@ 40 >= [0]GCEVT@ 47 <= &&) (* background, first 8 *)
		[0]GCEVT@ 40 - color!

		[color@]ColorIndex@ GCColorBG!
	end elseif ([0]GCEVT@ 90 >= [0]GCEVT@ 97 <= &&) (* foreground, second 8 *)
		[0]GCEVT@ 90 - color!

		[color@]ColorIndex2@ GCColorFG!
	end elseif ([0]GCEVT@ 100 >= [0]GCEVT@ 107 <= &&) (* background, second 8 *)
		[0]GCEVT@ 100 - color!

		[color@]ColorIndex2@ GCColorBG!
	end elseif ([1]GCEVT@ 5 ==)
		if ([0]GCEVT@ 38 ==)
			[2]GCEVT@ GCColorFG!
		end elseif ([0]GCEVT@ 48 ==)
			[2]GCEVT@ GCColorBG!
		end
	end

	GConsoleDrawCur
end

fn GConsoleClearLine { -- }
	auto ox
	GCCurX@ ox!

	while (GCCurX@ 0 >)
		'\b' GConsolePutChar
	end

	ox@ GCCurX!
end

fn GConsoleReset { -- }
	GConsoleClear
end

fn GConsoleParseEscape { c -- }
	if (c@ '0' >= c@ '9' <= &&)
		auto np
		GCEV@ 4 * GCEVT + np!

		10 np@ *=
		c@ '0' - np@ +=

		return
	end

	if (c@ '[' ==) return end
	elseif (c@ ';' ==) GCEV@ 1 + GCEVC % GCEV! return end
	elseif (c@ 'm' ==) GConsoleSetColor end
	elseif (c@ 'J' ==) GConsoleClear end
	elseif (c@ 'K' ==) GConsoleClearLine end

	0 GCEscape!
end

fn private GConsolePutCharM { argvt argcn -- out1 out2 out3 }
	argvt@ @
	GConsolePutChar
end

fn GConsolePutChar { char -- }
	if (char@ 255 >)
		return
	end

	if (GCNeedsDraw@)
		GConsoleDraw
		0 GCNeedsDraw!
	end

	if (GCEscape@) char@ GConsoleParseEscape return end

	if (char@ 0x1b ==)
		0 GCEV!
		1 GCEscape!
		GCEVT GCEVC 4 * 0 memset
		return
	end

	GConsoleClearCur

	char@ GConsolePutCharF

	GConsoleDrawCur
end

fn GConsolePutCharF { char -- }
	if (char@ '\n' ==)
		GConsoleNewline
		return
	end elseif (char@ '\b' ==)
		GConsoleBack
		return
	end elseif (char@ '\t' ==)
		GConsoleTab
		return
	end elseif (char@ '\r' ==)
		0 GCCurX!
		return
	end

	GCCurX@ FontWidth * GConsoleX@ +
	GCCurY@ FontHeight * GConsoleY@ +
	char@
	GCColorBG@
	GCColorFG@
	FontDrawChar

	GCCurX@ 1 + GCCurX!

	if (GCCurX@ GCWidth@ >=)
		GConsoleNewline
	end
end