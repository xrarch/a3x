#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

struct MemoryDescriptor
	4 BaseAddress
	4 Size
	4 Type

	4 Next
endstruct

const RAM256DescSpace 0x10000000

const RAM256SlotSz    0x2000000

// the firmware memory descriptor will be the first link in the descriptor list
buffer FWMemDescriptor MemoryDescriptor_SIZEOF

fn BuildMemory { -- }
	0x1000         FWMemDescriptor MemoryDescriptor_BaseAddress + !
	FWEND 0x1000 - FWMemDescriptor MemoryDescriptor_Size + !
	MEMORYRESERVED FWMemDescriptor MemoryDescriptor_Type + !

	DeviceNew
		"ram" DSetName

		"memory" "deviceType" DAddProperty

		"AISA,memory" "model" DAddProperty

		1 "revision" DAddProperty

		pointerof RAM256NextDescriptorM "nextDescriptor" DAddMethod
		pointerof RAM256DescriptorInfoM "getDescriptorInfo" DAddMethod

		auto memdesc
		auto memdescr

		FWMemDescriptor memdescr!
		FWMemDescriptor memdesc!

		auto max
		RAM256Slots max!

		auto lastsize
		0 lastsize!

		auto i
		0 i!

		auto sz
		0 sz!

		while (i@ max@ <)
			auto thissize

			i@ RAM256SlotSize thissize!

			thissize@ sz +=

			if (lastsize@ RAM256SlotSz <)
				// only make a new descriptor if not contiguous

				thissize@ lastsize!

				if (thissize@)
					// create a descriptor for this RAM slot

					memdesc@ memdescr!

					MemoryDescriptor_SIZEOF Malloc memdesc!

					memdesc@ memdescr@ MemoryDescriptor_Next + !

					if (i@ 0 ==)
						FWEND memdesc@ MemoryDescriptor_BaseAddress + !
						FWEND thissize -=
					end else
						i@ RAM256SlotSz * memdesc@ MemoryDescriptor_BaseAddress + !
					end

					thissize@  memdesc@ MemoryDescriptor_Size + !
					MEMORYFREE memdesc@ MemoryDescriptor_Type + !
				end
			end else
				thissize@ lastsize!

				// extend last descriptor

				thissize@ memdescr@ MemoryDescriptor_Size + +=
			end

			1 i +=
		end

		sz@ "totalRAM" DAddProperty
	DeviceExit
end

fn private RAM256NextDescriptorM { argvt argcn -- out1 out2 out3 }
	argvt@ @
	RAM256NextDescriptor out1!
end

fn RAM256NextDescriptor { desc -- next }
	if (desc@ -1 ==)
		FWMemDescriptor next!
	end else
		desc@ MemoryDescriptor_Next + @ next!
	end
end

fn private RAM256DescriptorInfoM { argvt argcn -- out1 out2 out3 }
	argvt@ @
	RAM256DescriptorInfo out3! out2! out1!
end

fn RAM256DescriptorInfo { desc -- addr size type }
	desc@ MemoryDescriptor_BaseAddress + @ addr!
	desc@ MemoryDescriptor_Size + @ size!
	desc@ MemoryDescriptor_Type + @ type!
end

fn RAM256Slots { -- slots }
	RAM256DescSpace@ slots!
end

fn RAM256SlotSize { n -- size }
	n@ 1 + 4 * RAM256DescSpace + @ size!
end