#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

const ClockPortCmd 0x20
const ClockPortA 0x21

var ClockStartSec 0
var ClockStartMS 0

const ClockInterrupt 0x1

fn BuildCClock { -- }
	DeviceNew
		"clock" DSetName

		pointerof ClockUptimeM "uptime" DAddMethod
		pointerof ClockEpochM "epoch" DAddMethod
		pointerof ClockWaitM "wait" DAddMethod

		"rtc" "deviceType" DAddProperty

		"AISA,clock" "model" DAddProperty

		1 "revision" DAddProperty

		ClockInterrupt "interrupt#" DAddProperty

		ClockPortCmd "clock,cmdPort" DAddProperty
		ClockPortA "clock,dataPort" DAddProperty
	DeviceExit

	ClockEpoch ClockStartMS! ClockStartSec!
end

fn private ClockEpochM { argvt argcn -- out1 out2 out3 }
	ClockEpoch out2! out1!
end

fn ClockEpoch { -- sec ms }
	auto rs
	InterruptDisable rs!

	2 ClockPortCmd DCitronCommand
	ClockPortA DCitronInl sec!

	3 ClockPortCmd DCitronCommand
	ClockPortA DCitronInl ms!

	rs@ InterruptRestore
end

fn private ClockUptimeM { argvt argcn -- out1 out2 out3 }
	ClockUptime out1!
end

fn ClockUptime { -- ms }
	auto sec
	ClockEpoch ms! sec!

	sec@ ClockStartSec@ - 1000 * ms@ + ms!
end

fn private ClockWaitM { argvt argcn -- out1 out2 out3 }
	argvt@ @
	ClockWait
end

fn ClockWait { ms -- }
	auto wu
	ClockUptime ms@ + wu!

	while (ClockUptime wu@ <) end
end

fn ClockSetInterval { ms -- }
	auto rs
	InterruptDisable rs!

	ms@ ClockPortA DCitronOutl
	1 ClockPortCmd DCitronCommand

	rs@ InterruptRestore
end