#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

const AHDBCmdPort 0x19
const AHDBPortA 0x1A
const AHDBPortB 0x1B

const AHDBCmdSelect 0x1
const AHDBCmdRead 0x2
const AHDBCmdWrite 0x3
const AHDBCmdInfo 0x4
const AHDBCmdPoll 0x5

const AHDBBuffer 0xF8020000

struct AHDB_VDB
	16 Label
	128 PartitionTable
	4 Magic
endstruct

struct AHDB_PTE
	8 Label
	4 Blocks
	4 Status
endstruct

fn private AHDBTransferBlock { src dest -- }
	dest@ src@ 4096 memcpy
end

fn AHDBBootable { part id -- }
	auto brecord
	4096 Malloc brecord!

	if (brecord@ 1 AHDBRead 1 ==)
		(* is it a valid boot record? *)
		if (brecord@ BootRecord_Magic + @ BootMagic ==)
			(* yes, it's bootable *)

			brecord@ BootRecord_OSLabel + strdup "osLabel" DAddProperty

			auto badge
			512 Malloc badge!

			badge@ brecord@ BootRecord_BadgeBitmap + 512 memcpy

			badge@ "osBadge" DAddProperty

			AddBootable
		end
	end else
		auto pc
		if (part@ -1 ==)
			'-' pc!
		end else
			part@ 'a' + pc!
		end
		pc@ id@ "dks%d/%l: couldn't read boot record\n" Printf
	end

	brecord@ Free
end

fn AHDBPartitions { id -- pcount }
	auto vdbuf
	4096 Malloc vdbuf!

	0 pcount!

	if (vdbuf@ 0 AHDBRead 1 ==)
		if (vdbuf@ AHDB_VDB_Magic + @ 0x4E4D494C ==)
			vdbuf@ AHDB_VDB_Label + strdup "diskLabel" DAddProperty

			auto i
			0 i!

			auto pc
			0 pc!

			auto offset
			2 offset!

			while (i@ 8 <)
				auto ptr
				AHDB_PTE_SIZEOF i@ * vdbuf@ + ptr!

				if (ptr@ AHDB_PTE_Status + @ 0 ~=)
					auto char
					2 Calloc char!
					'a' pc@ + char@ sb

					1 pcount +=

					auto pnt
					DevCurrent@ pnt!

					DeviceNew
						char@ DSetName

						id@ "satsuma,id" DAddProperty
						ptr@ AHDB_PTE_Blocks + @ "blocks" DAddProperty
						offset@ "offset" DAddProperty
						pc@ "partition#" DAddProperty

						"disk-logical" "deviceType" DAddProperty

						ptr@ AHDB_PTE_Label + strdup "diskLabel" DAddProperty

						pointerof AHDBReadM "readBlock" DAddMethod
						pointerof AHDBWriteM "writeBlock" DAddMethod

						"AISA,satsuma-disk" "model" DAddProperty

						pnt@ "parentDisk" DAddProperty

						1 "revision" DAddProperty

						i@ id@ AHDBBootable
					DeviceExit

					ptr@ AHDB_PTE_Blocks + @ offset@ + offset!

					1 pc +=
				end

				1 i +=
			end
		end else
			id@ "dks%d: bad volume descriptor\n" Printf
		end
	end else
		id@ "dks%d: couldn't read blk0\n" Printf
	end

	vdbuf@ Free
end

fn BuildSatsuma { -- }
	DeviceNew
		"dks" DSetName

		"disk-bus" "deviceType" DAddProperty

		"AISA,satsuma" "model" DAddProperty

		1 "revision" DAddProperty

		0x2 "interrupt#" DAddProperty

		auto i
		0 i!
		while (i@ 8 <)
			auto present
			auto blocks

			i@ AHDBPoll present! blocks!

			if (present@ 1 ==)
				DeviceNew
					auto lilbuf
					5 Calloc lilbuf!
					i@ lilbuf@ itoa
					lilbuf@ DSetName

					i@ "satsuma,id" DAddProperty
					blocks@ "blocks" DAddProperty
					0 "offset" DAddProperty

					"disk" "deviceType" DAddProperty

					"AISA,satsuma-disk" "model" DAddProperty

					1 "revision" DAddProperty

					pointerof AHDBReadM "readBlock" DAddMethod
					pointerof AHDBWriteM "writeBlock" DAddMethod

					auto pcount

					i@ AHDBPartitions pcount!

					if (pcount@ 0 ==)
						-1 i@ AHDBBootable
					end

					pcount@ "partitions" DAddProperty
				DeviceExit
			end

			1 i +=
		end
	DeviceExit
end

fn private AHDBReadM { argvt argcn -- out1 out2 out3 }
	argvt@ 4 + @
	argvt@ @
	AHDBRead out1!
end

fn AHDBRead { ptr block -- ok }
	auto rs
	InterruptDisable rs!

	auto id
	"satsuma,id" DGetProperty id!

	if (block@ "blocks" DGetProperty >=) rs@ InterruptRestore ERR ok! return end

	"offset" DGetProperty block@ + block!

	id@ AHDBSelect

	block@ AHDBPortA DCitronOutl
	AHDBCmdRead AHDBCmdPort DCitronCommand

	AHDBBuffer ptr@ AHDBTransferBlock

	rs@ InterruptRestore

	1 ok!
end

fn private AHDBWriteM { argvt argcn -- out1 out2 out3 }
	argvt@ 4 + @
	argvt@ @
	AHDBWrite out1!
end

fn AHDBWrite { ptr block -- ok }
	auto rs
	InterruptDisable rs!

	auto id
	"satsuma,id" DGetProperty id!

	if (block@ "blocks" DGetProperty >=) rs@ InterruptRestore ERR ok! return end

	"offset" DGetProperty block@ + block!

	id@ AHDBSelect

	ptr@ AHDBBuffer AHDBTransferBlock

	block@ AHDBPortA DCitronOutl
	AHDBCmdWrite AHDBCmdPort DCitronCommand

	rs@ InterruptRestore

	1 ok!
end

fn AHDBPoll { id -- blocks present }
	auto rs
	InterruptDisable rs!

	id@ AHDBPortA DCitronOutl

	AHDBCmdPoll AHDBCmdPort DCitronCommand

	AHDBPortA DCitronInl present!
	AHDBPortB DCitronInl blocks!

	rs@ InterruptRestore
end

fn AHDBInfo { -- event details }
	auto rs
	InterruptDisable rs!

	AHDBCmdInfo AHDBCmdPort DCitronCommand
	AHDBPortA DCitronInb event!
	AHDBPortB DCitronInb details!

	rs@ InterruptRestore
end

fn AHDBSelect { drive -- }
	auto rs
	InterruptDisable rs!

	drive@ AHDBPortA DCitronOutl
	AHDBCmdSelect AHDBCmdPort DCitronCommand

	rs@ InterruptRestore
end