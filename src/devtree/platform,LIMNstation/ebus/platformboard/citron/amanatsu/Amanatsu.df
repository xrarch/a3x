#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

extern AKeyboardInit
extern AKeyboardPoll

extern AMouseInit
extern AMousePoll

procedure BuildAmanatsu (* -- *)
	DeviceNew
		"amanatsu" DSetName

		"bus" "deviceType" DAddProperty

		"AISA,amanatsu" "model" DAddProperty

		pointerof AmanatsuPoll "amanatsu,poll" DAddMethod
		pointerof AmanatsuSelectDev "amanatsu,selectDev" DAddMethod
		pointerof AmanatsuReadMID "amanatsu,readMID" DAddMethod
		pointerof AmanatsuCommand "amanatsu,command" DAddMethod
		pointerof AmanatsuCommandAsync "amanatsu,commandAsync" DAddMethod
		pointerof AmanatsuWriteA "amanatsu,writeA" DAddMethod
		pointerof AmanatsuWriteB "amanatsu,writeB" DAddMethod
		pointerof AmanatsuReadA "amanatsu,readA" DAddMethod
		pointerof AmanatsuReadB "amanatsu,readB" DAddMethod
		pointerof AmanatsuDevFromInt "amanatsu,devFromInt" DAddMethod
		pointerof AmanatsuSetInterrupt "amanatsu,setInterrupt" DAddMethod
		pointerof AmanatsuSpecialCMD "amanatsu,specialCommand" DAddMethod

		pointerof AmanatsuReset "reset" DAddMethod

		AKeyboardInit
		AKeyboardPoll
		
		AMouseInit
		AMousePoll
	DeviceExit
end

(* start assigning interrupts at 0x40 *)
var AmaLastInterrupt 0x40

buffer AmaInterruptMap 256

(* disabling and restoring interrupts is up to the user of these functions *)

procedure AmanatsuPoll (* num -- mid *)
	AmanatsuSelectDev AmanatsuReadMID
end

procedure AmanatsuSelectDev (* num -- *)
	AmaPortDev DCitronOutb
end

procedure AmanatsuReadMID (* -- mid *)
	AmaPortMID DCitronInl
end

procedure AmanatsuCommand { cmd -- }
	cmd@ AmaPortCMD DCitronOutl

	while (AmaPortCMD DCitronInl 0 ~=) end
end

procedure AmanatsuCommandAsync (* cmd -- *)
	AmaPortCMD DCitronOutl
end

procedure AmanatsuWriteA (* long -- *)
	AmaPortA DCitronOutl
end

procedure AmanatsuWriteB (* long -- *)
	AmaPortB DCitronOutl
end

procedure AmanatsuReadA (* -- long *)
	AmaPortA DCitronInl
end

procedure AmanatsuReadB (* -- long *)
	AmaPortB DCitronInl
end

procedure AmanatsuDevFromInt (* int -- dev *)
	AmaInterruptMap + gb
end

procedure AmanatsuSetInterrupt { handler dev -- num }
	handler@ AmaLastInterrupt@ InterruptRegister
	AmaLastInterrupt@ dev@ 1 AmanatsuSpecialCMD

	dev@ AmaLastInterrupt@ AmaInterruptMap + sb

	AmaLastInterrupt@ num!

	1 AmaLastInterrupt +=
end

procedure AmanatsuSpecialCMD { a b cmd -- }
	0 AmanatsuSelectDev
	a@ AmanatsuWriteA
	b@ AmanatsuWriteB

	cmd@ AmanatsuCommand
end

procedure AmanatsuReset (* -- *)
	0 0 2 AmanatsuSpecialCMD
end




