#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

extern HeapInit { -- }
extern ConsoleEarlyInit { -- }
extern InterruptsInit { -- }
extern DeviceInit { -- }
extern ConsoleInit { -- }
extern FontInit { -- }
extern PlatformInit { -- }

extern Main { -- }

fn BIOSEntry { -- }
	HeapInit

	ConsoleEarlyInit
	(* print routines now work, do NOT use them before this *)

	LinkInfo

	if (NVRAMCheck ~~)
		"nvram corrupted! formatting\n" Printf
		NVRAMFormat
	end

	PlatformInit

	PlatformName@ "\nWelcome to %s\n" Printf

	DeviceInit

	InterruptsInit

	FirmwareBanner

	ConsoleInit

	FontInit

	Main
end

asm "

.entry BIOSEntry

;set exception vector to zero and immediately cause an exception
;this forces the CPU to reset and do whatever it needs to do that cleanly

Reset:
.global Reset
	li ev, 0
	div t0, t0, zero
.wait:
	b .wait

"

fn LinkInfo { -- }
	"SECTION  BASE     SIZE     END\n" Printf
	pointerof _text_end pointerof _text_size pointerof _text_end
	"   text  %08x %08x %08x\n" Printf
	pointerof _data_end pointerof _data_size pointerof _data_end
	"   data  %08x %08x %08x\n" Printf
	pointerof _bss_end pointerof _bss_size pointerof _bss_end
	"    bss  %08x %08x %08x\n" Printf
end

fn LateReset { -- }
	"\[c" Printf
	Reset
end

fn FirmwareBanner { -- }
	'\n' Putc

	"/" DeviceSelect
		"buildDate" DGetProperty "build" DGetProperty
		"author" DGetProperty "version" DGetProperty DGetName "Firmware: %s %s by %s (build %s %s)\n" Printf
	DeviceExit

	"/platform" DeviceSelect
		"model" DGetProperty "Platform: %s\n" Printf
	DeviceExit

	"/cpu" DeviceSelect
		"model" DGetProperty "     CPU: %s\n" Printf
	DeviceExit
	
	"/memory" DeviceSelect
		"totalRAM" DGetProperty 1024 / "     RAM: %dkb\n" Printf
	DeviceExit

	'\n' Putc
end