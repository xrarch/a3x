#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

fn CheckForInstantBoot { -- }
	auto bootvar
	"instant-boot" NVRAMGetVar bootvar!

	if (bootvar@ ~~)
		return
	end

	"instant-boot" NVRAMDeleteVar

	auto dev
	bootvar@ DevTreeWalk dev!

	if (dev@ 0 ==)
		bootvar@ "bad device path %s.\n" Printf

		Reset
	end

	auto args
	"" "boot-args" NVRAMDefaultGetVar args!

	auto r
	dev@ args@ BootNode r!

	[r@]BootErrors@ "Failed to boot: %s\n" Problem
end

fn Main { -- }
	CheckForInstantBoot

	auto kbn
	"/keyboard" DevTreeWalk kbn!
	
	auto cn
	"/clock" DevTreeWalk cn!

	auto gcn
	"/gconsole" DevTreeWalk gcn!

	auto r

	auto fv

	"false" "verbose?" NVRAMDefaultGetVar "true" strcmp fv!

	if (fv@ ~~ kbn@ 0 ~= &&)
		kbn@ DeviceSelectNode
			5 "isDown" DCallMethod drop drop drop fv!

			80 "isDown" DCallMethod drop drop drop r!

			r@ fv@ && fv!
		DeviceExit
	end

	if (NumBootableDevs@ 1 >)
		0 fv!
	end

	if (fv@)
		ConsoleUserOut
	end

	if ("true" "auto-boot?" NVRAMDefaultGetVar "true" strcmp)
		auto cancel

		0 cancel!

		if (kbn@ 0 ~=)
			if (fv@)
				"\[[33mHold\[[0m \[[94mCTRL\[[0m \[[33mto halt automatic boot or \[[94mENTER\[[0m \[[33mto boot immediately...\[[0m\n" Printf

				kbn@ DeviceSelectNode
					50 80 5000 "waitKey" DCallMethod drop drop drop cancel!
				DeviceExit
			end
		end

		if (cancel@ ~~)
			AutoBoot r!
			if (r@ 9 ==) (* if it was a system software error, don't draw the console box *)
				if (gcn@)
					gcn@ DeviceSelectNode
						"nodraw" DCallMethod drop drop drop drop
					DeviceExit
				end
			end

			ConsoleUserOut

			[r@]BootErrors@ "boot: %s\n" Printf
		end else
			ConsoleUserOut

			"user cancelled automatic boot\n" Printf
		end
	end else
		"auto-boot?=false, not automatically booting\n" Printf
	end

	'\n' Putc

	Monitor

	LateReset
end