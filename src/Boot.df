#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

table BootErrors
	0
	"ok"
	"not supported by device"
	"I/O error while searching for system software"
	"no system software found on disk"
	"I/O error while reading boot program"
	"invalid boot program"
	"no such device"
	"not enough memory"
	"system software error"
endtable
public BootErrors

fn DevBootable { devnode -- bootable }
	devnode@ DevBootableR swap drop bootable!
end

fn DevBootableR { devnode -- brecord bootable }
	if (devnode@ 0 ==)
		7 bootable! return
	end

	4096 Malloc brecord!

	auto ok
	auto dok

	devnode@ DeviceSelectNode
		brecord@ 1 "readBlock" DCallMethod ok! drop drop dok!
	DeviceExit

	if (ok@ ~~)
		brecord@ Free
		2 bootable! return (* not supported *)
	end

	if (dok@ ERR ==)
		brecord@ Free
		3 bootable! return (* failed to load boot record *)
	end

	if (brecord@ BootRecord_Magic + @ BootMagic == ~~)
		brecord@ Free
		4 bootable! return (* invalid boot record *)
	end

	1 bootable!

	return
end

fn AutoBoot { -- ok }
	auto bootnode

	"/bootdisk" DevTreeWalk bootnode!

	if (bootnode@ 0 ==)
		7 ok! return
	end

	bootnode@ DeviceSelectNode
		"bootPath" DGetProperty "\[[33mautoboot:\[[0m \[[94m%s\[[0m\n" Printf
	DeviceExit

	'\n' Putc

	bootnode@

	"" "boot-args" NVRAMDefaultGetVar

	BootNode ok!
end

fnptr BootProgramEntry { api devnode args -- ret }

fn BootNode { devnode args -- ok }
	auto brecord

	devnode@ DevBootableR ok! brecord!

	if (ok@ 1 ~=)
		return
	end

	auto bblock
	auto bbc
	brecord@ BootRecord_BootBlockStart + @ bblock!
	brecord@ BootRecord_BootBlockCount + @ bbc!

	args@ brecord@ BootRecord_OSLabel + "\[[33mbooting: \[[0m\[[94m%s (%s)\[[0m\n" Printf

	brecord@ Free

	auto ptr
	BootBottom ptr!

	auto tmem
	"/memory" DeviceSelect
		"totalRAM" DGetProperty tmem!
	DeviceExit

	auto nmem
	ptr@ bbc@ 4096 * + nmem!

	if (nmem@ tmem@ >=)
		tmem@ nmem@ "at least %d bytes of contiguous memory are required to load this bootloader, only %d bytes present\n" Printf
		8 ok! return
	end

	ptr@ bbc@ 4096 * "\[[33mloading boot program:\[[94m %d bytes at 0x%x\[[0m\n" Printf

	devnode@ DeviceSelectNode
		auto i
		0 i!

		while (i@ bbc@ <)
			ptr@ bblock@ "readBlock" DCallMethod drop drop drop ok!

			if (ok@ ERR ==)
				5 ok! return (* failed to load boot blocks *)
			end

			1 bblock +=
			1 i +=
			ptr@ 4096 + ptr!
		end
	DeviceExit

	if (BootBottom@ BootMagic ~=)
		6 ok! return
	end

	"\[[33mexecuting boot program!\[[0m\n" Printf

	auto res

	API devnode@ args@ BootBottom 4 + @ BootProgramEntry res!

	if (res@ 0 ==)
		1 ok!
	end else
		9 ok!
	end
end