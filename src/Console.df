#include "<df>/dragonfruit.h"
#include "<inc>/a3x.h"

var EarlyBufferPtr 0

var ConsoleOut 0
public ConsoleOut

var ConsoleIn 0
public ConsoleIn

var ConsoleOutMethod 0
public ConsoleOutMethod

var ConsoleInMethod 0
public ConsoleInMethod

var EarlyBuffer 0
const EarlyBufferSize 1024
var EarlyBufPtr 0
var EarlyBufSP 0
var EarlyCCount 0

var UserOut 0

var ConInit 0

fn EarlyPut { c -- }
	c@ EarlyBuffer@ EarlyBufPtr@ EarlyBufferSize % + sb

	1 EarlyBufPtr +=

	if (EarlyBufPtr@ EarlyBufferSize >=)
		1 EarlyBufSP +=
	end

	EarlyCCount@ 1 + EarlyBufferSize 1 - min EarlyCCount!
end

fn DumpEarly { -- }
	if (ConsoleOutMethod@ 0 ~=)
		auto sp
		EarlyBufSP@ sp!

		auto i
		0 i!

		while (i@ EarlyCCount@ <)
			auto c
			EarlyBuffer@ sp@ EarlyBufferSize % + gb c!

			if (c@ 0 ~=)
				1 c@ rPutc
			end

			1 sp +=
			1 i +=
		end
	end
end

fn ConsoleSetIn { dn -- }
	dn@ ConsoleIn!

	if (dn@ 0 ==)
		0 ConsoleIn!
		0 ConsoleInMethod!
		return
	end

	dn@ DeviceSelectNode
		"read" DGetMethod ConsoleInMethod!
	DeviceExit
end

fn ConsoleSetOut { dn -- }
	dn@ ConsoleOut!

	if (dn@ 0 ==)
		0 ConsoleOut!
		0 ConsoleOutMethod!
		return
	end

	dn@ DeviceSelectNode
		"write" DGetMethod ConsoleOutMethod!
	DeviceExit
end

fn rPutc { de c -- }
	if (de@ ~~)
		if (ConInit@ 0 == UserOut@ 0 == ||)
			c@ EarlyPut
		end
	end

	if (ConsoleOutMethod@ 0 ==)
		return
	end

	ConsoleOut@ DeviceSelectNode
		c@ ConsoleOutMethod@ DCallMethodPtr drop drop drop
	DeviceExit
end

fn Putc { c -- }
	0 c@ rPutc
end

fn FPutc { fd c -- }
	c@ Putc
end

fn Getc { -- c }
	if (ConsoleInMethod@ 0 ==) ERR c! return end

	ConsoleIn@ DeviceSelectNode
		ConsoleInMethod@ DCallMethodPtr drop drop c!
	DeviceExit
end

(* try to redirect stdout/stdin to /gconsole and /keyboard if these nodes exist *)
fn ConsoleUserOut { -- }
	if (UserOut@)
		return
	end

	auto gcn
	"/gconsole" DevTreeWalk gcn!

	auto kbn
	"/keyboard" DevTreeWalk kbn!

	if (gcn@)
		if (kbn@)
			gcn@ ConsoleSetOut

			kbn@ ConsoleSetIn

			1 UserOut!

			DumpEarly
		end
	end
end

fn ConsoleEarlyInit { -- }
	EarlyBufferSize Malloc EarlyBuffer!
end

fn ConsoleInit { -- }
	auto co
	auto ci

	"/serial" "console-stdout" NVRAMDefaultGetVar DevTreeWalk co!

	"/serial" "console-stdin" NVRAMDefaultGetVar DevTreeWalk ci!

	co@ ConsoleSetOut
	ci@ ConsoleSetIn

	if (ConsoleOut@ 0 ==)
		"/serial" DevTreeWalk ConsoleSetOut
	end

	if (ConsoleIn@ 0 ==)
		"/serial" DevTreeWalk ConsoleSetIn
	end

	1 ConInit!

	DumpEarly
end

fn Gets { s max -- }
	auto len
	0 len!

	while (1)
		auto c
		ERR c!
		while (c@ ERR ==)
			Getc c!
		end

		if (c@ '\n' ==)
			'\n' Putc
			break
		end

		if (c@ '\b' ==)
			if (len@ 0 >)
				1 len -=
				0 s@ len@ + sb
				'\b' Putc
				' ' Putc
				'\b' Putc
			end
		end elseif (len@ max@ <)
			c@ s@ len@ + sb

			1 len +=
			c@ Putc
		end
	end

	0 s@ len@ + sb
end

fn Puts { s -- }
	while (s@ gb 0 ~=)
		s@ gb Putc
		1 s +=
	end
end

fn FPuts { fd s -- }
	s@ Puts
end